// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package wiki

import (
	"context"

	"goa.design/goa/v3/security"
	wikiviews "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki/views"
)

// Wikiサービス
type Service interface {
	// Wiki取得
	Show(context.Context, *ShowPayload) (res *Wiki, err error)
	// 新しいWikiを作成
	Create(context.Context, *CreatePayload) (res *Wiki, err error)
	// 指定されたIDのWikiの内容を更新
	Update(context.Context, *UpdatePayload) (res *Wiki, err error)
	// 指定されたIDのWikiを削除
	Delete(context.Context, *DeletePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "wiki"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "wiki"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"show", "create", "update", "delete"}

// CreatePayload is the payload type of the wiki service create method.
type CreatePayload struct {
	// JWT token
	Token *string
	// Wikiを作成するチャンネルのID
	ChannelID string
	// Markdown形式のコンテンツ
	Content string
}

// DeletePayload is the payload type of the wiki service delete method.
type DeletePayload struct {
	// JWT token
	Token *string
	// 削除するWikiのユニークID
	ID string
}

// ShowPayload is the payload type of the wiki service show method.
type ShowPayload struct {
	// JWT token
	Token *string
	// WikiのユニークID
	ID string
}

// UpdatePayload is the payload type of the wiki service update method.
type UpdatePayload struct {
	// JWT token
	Token *string
	// 更新するWikiのユニークID
	ID string
	// 更新後のMarkdownコンテンツ
	Content string
}

// Wiki is the result type of the wiki service show method.
type Wiki struct {
	// Wiki毎のユニークな値
	ID string
	// 作成されたチャンネルのID
	ChannelID string
	// Markdown形式のコンテンツ
	Content string
	// 作成日時 (RFC3339 format)
	CreatedAt string
	// 更新日時 (RFC3339 format)
	UpdatedAt string
}

// Invalid request
type BadRequest string

// Internal server error
type InternalError string

// Wiki not found
type NotFound string

// Unauthorized access
type Unauthorized string

// Error returns an error description.
func (e BadRequest) Error() string {
	return "Invalid request"
}

// ErrorName returns "bad_request".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e BadRequest) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "bad_request".
func (e BadRequest) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Wiki not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// NewWiki initializes result type Wiki from viewed result type Wiki.
func NewWiki(vres *wikiviews.Wiki) *Wiki {
	return newWiki(vres.Projected)
}

// NewViewedWiki initializes viewed result type Wiki from result type Wiki
// using the given view.
func NewViewedWiki(res *Wiki, view string) *wikiviews.Wiki {
	p := newWikiView(res)
	return &wikiviews.Wiki{Projected: p, View: "default"}
}

// newWiki converts projected type Wiki to service type Wiki.
func newWiki(vres *wikiviews.WikiView) *Wiki {
	res := &Wiki{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.ChannelID != nil {
		res.ChannelID = *vres.ChannelID
	}
	if vres.Content != nil {
		res.Content = *vres.Content
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	return res
}

// newWikiView projects result type Wiki to projected type WikiView using the
// "default" view.
func newWikiView(res *Wiki) *wikiviews.WikiView {
	vres := &wikiviews.WikiView{
		ID:        &res.ID,
		ChannelID: &res.ChannelID,
		Content:   &res.Content,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
	}
	return vres
}
