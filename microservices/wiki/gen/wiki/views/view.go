// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki views
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Wiki is the viewed result type that is projected based on a view.
type Wiki struct {
	// Type to project
	Projected *WikiView
	// View to render
	View string
}

// WikiView is a type that runs validations on a projected type.
type WikiView struct {
	// Wiki毎のユニークな値
	ID *string
	// 作成されたチャンネルのID
	ChannelID *string
	// Markdown形式のコンテンツ
	Content *string
	// 作成日時 (RFC3339 format)
	CreatedAt *string
	// 更新日時 (RFC3339 format)
	UpdatedAt *string
}

var (
	// WikiMap is a map indexing the attribute names of Wiki by view name.
	WikiMap = map[string][]string{
		"default": {
			"id",
			"channel_id",
			"content",
			"created_at",
			"updated_at",
		},
	}
)

// ValidateWiki runs the validations defined on the viewed result type Wiki.
func ValidateWiki(result *Wiki) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateWikiView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateWikiView runs the validations defined on WikiView using the
// "default" view.
func ValidateWikiView(result *WikiView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.ChannelID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("channel_id", "result"))
	}
	if result.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	return
}
