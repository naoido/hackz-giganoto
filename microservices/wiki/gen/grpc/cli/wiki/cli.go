// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package cli

import (
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
	wikic "object-t.com/hackz-giganoto/microservices/wiki/gen/grpc/wiki/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `wiki (show|create|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` wiki show --message '{
      "id": "Adipisci voluptate expedita excepturi consequuntur magnam."
   }' --token "Sed fugit velit ea."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		wikiFlags = flag.NewFlagSet("wiki", flag.ContinueOnError)

		wikiShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		wikiShowMessageFlag = wikiShowFlags.String("message", "", "")
		wikiShowTokenFlag   = wikiShowFlags.String("token", "", "")

		wikiCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		wikiCreateMessageFlag = wikiCreateFlags.String("message", "", "")
		wikiCreateTokenFlag   = wikiCreateFlags.String("token", "", "")

		wikiUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		wikiUpdateMessageFlag = wikiUpdateFlags.String("message", "", "")
		wikiUpdateTokenFlag   = wikiUpdateFlags.String("token", "", "")

		wikiDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		wikiDeleteMessageFlag = wikiDeleteFlags.String("message", "", "")
		wikiDeleteTokenFlag   = wikiDeleteFlags.String("token", "", "")
	)
	wikiFlags.Usage = wikiUsage
	wikiShowFlags.Usage = wikiShowUsage
	wikiCreateFlags.Usage = wikiCreateUsage
	wikiUpdateFlags.Usage = wikiUpdateUsage
	wikiDeleteFlags.Usage = wikiDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "wiki":
			svcf = wikiFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "wiki":
			switch epn {
			case "show":
				epf = wikiShowFlags

			case "create":
				epf = wikiCreateFlags

			case "update":
				epf = wikiUpdateFlags

			case "delete":
				epf = wikiDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "wiki":
			c := wikic.NewClient(cc, opts...)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = wikic.BuildShowPayload(*wikiShowMessageFlag, *wikiShowTokenFlag)
			case "create":
				endpoint = c.Create()
				data, err = wikic.BuildCreatePayload(*wikiCreateMessageFlag, *wikiCreateTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = wikic.BuildUpdatePayload(*wikiUpdateMessageFlag, *wikiUpdateTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = wikic.BuildDeletePayload(*wikiDeleteMessageFlag, *wikiDeleteTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// wikiUsage displays the usage of the wiki command and its subcommands.
func wikiUsage() {
	fmt.Fprintf(os.Stderr, `Wikiサービス
Usage:
    %[1]s [globalflags] wiki COMMAND [flags]

COMMAND:
    show: Wiki取得
    create: 新しいWikiを作成
    update: 指定されたIDのWikiの内容を更新
    delete: 指定されたIDのWikiを削除

Additional help:
    %[1]s wiki COMMAND --help
`, os.Args[0])
}
func wikiShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] wiki show -message JSON -token STRING

Wiki取得
    -message JSON: 
    -token STRING: 

Example:
    %[1]s wiki show --message '{
      "id": "Adipisci voluptate expedita excepturi consequuntur magnam."
   }' --token "Sed fugit velit ea."
`, os.Args[0])
}

func wikiCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] wiki create -message JSON -token STRING

新しいWikiを作成
    -message JSON: 
    -token STRING: 

Example:
    %[1]s wiki create --message '{
      "channel_id": "Asperiores consectetur et sint doloremque.",
      "content": "Aperiam excepturi veritatis numquam."
   }' --token "Eaque sit omnis rerum ullam adipisci."
`, os.Args[0])
}

func wikiUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] wiki update -message JSON -token STRING

指定されたIDのWikiの内容を更新
    -message JSON: 
    -token STRING: 

Example:
    %[1]s wiki update --message '{
      "content": "Ex occaecati.",
      "id": "Eveniet perferendis velit ullam debitis repudiandae vero."
   }' --token "Non enim quia delectus repudiandae enim facere."
`, os.Args[0])
}

func wikiDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] wiki delete -message JSON -token STRING

指定されたIDのWikiを削除
    -message JSON: 
    -token STRING: 

Example:
    %[1]s wiki delete --message '{
      "id": "Vel voluptas quis sint fugiat minus."
   }' --token "Et commodi aut vitae minima."
`, os.Args[0])
}
