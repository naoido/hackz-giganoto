// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki gRPC server encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package server

import (
	"context"
	"strings"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
	wikipb "object-t.com/hackz-giganoto/microservices/wiki/gen/grpc/wiki/pb"
	wiki "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki"
	wikiviews "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki/views"
)

// EncodeShowResponse encodes responses from the "wiki" service "show" endpoint.
func EncodeShowResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*wikiviews.Wiki)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "show", "*wikiviews.Wiki", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoShowResponse(result)
	return resp, nil
}

// DecodeShowRequest decodes requests sent to "wiki" service "show" endpoint.
func DecodeShowRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *wikipb.ShowRequest
		ok      bool
	)
	{
		if message, ok = v.(*wikipb.ShowRequest); !ok {
			return nil, goagrpc.ErrInvalidType("wiki", "show", "*wikipb.ShowRequest", v)
		}
	}
	var payload *wiki.ShowPayload
	{
		payload = NewShowPayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeCreateResponse encodes responses from the "wiki" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*wikiviews.Wiki)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "create", "*wikiviews.Wiki", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "wiki" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *wikipb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*wikipb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("wiki", "create", "*wikipb.CreateRequest", v)
		}
	}
	var payload *wiki.CreatePayload
	{
		payload = NewCreatePayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "wiki" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*wikiviews.Wiki)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "update", "*wikiviews.Wiki", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "wiki" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *wikipb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*wikipb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("wiki", "update", "*wikipb.UpdateRequest", v)
		}
	}
	var payload *wiki.UpdatePayload
	{
		payload = NewUpdatePayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "wiki" service "delete"
// endpoint.
func EncodeDeleteResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "wiki" service "delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *wikipb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*wikipb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("wiki", "delete", "*wikipb.DeleteRequest", v)
		}
	}
	var payload *wiki.DeletePayload
	{
		payload = NewDeletePayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}
