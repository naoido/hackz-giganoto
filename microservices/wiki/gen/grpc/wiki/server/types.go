// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package server

import (
	wikipb "object-t.com/hackz-giganoto/microservices/wiki/gen/grpc/wiki/pb"
	wiki "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki"
	wikiviews "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki/views"
)

// NewShowPayload builds the payload of the "show" endpoint of the "wiki"
// service from the gRPC request type.
func NewShowPayload(message *wikipb.ShowRequest, token *string) *wiki.ShowPayload {
	v := &wiki.ShowPayload{
		ID: message.Id,
	}
	v.Token = token
	return v
}

// NewProtoShowResponse builds the gRPC response type from the result of the
// "show" endpoint of the "wiki" service.
func NewProtoShowResponse(result *wikiviews.WikiView) *wikipb.ShowResponse {
	message := &wikipb.ShowResponse{
		Id:        *result.ID,
		ChannelId: *result.ChannelID,
		Content:   *result.Content,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// NewCreatePayload builds the payload of the "create" endpoint of the "wiki"
// service from the gRPC request type.
func NewCreatePayload(message *wikipb.CreateRequest, token *string) *wiki.CreatePayload {
	v := &wiki.CreatePayload{
		ChannelID: message.ChannelId,
		Content:   message.Content,
	}
	v.Token = token
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "create" endpoint of the "wiki" service.
func NewProtoCreateResponse(result *wikiviews.WikiView) *wikipb.CreateResponse {
	message := &wikipb.CreateResponse{
		Id:        *result.ID,
		ChannelId: *result.ChannelID,
		Content:   *result.Content,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "wiki"
// service from the gRPC request type.
func NewUpdatePayload(message *wikipb.UpdateRequest, token *string) *wiki.UpdatePayload {
	v := &wiki.UpdatePayload{
		ID:      message.Id,
		Content: message.Content,
	}
	v.Token = token
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "wiki" service.
func NewProtoUpdateResponse(result *wikiviews.WikiView) *wikipb.UpdateResponse {
	message := &wikipb.UpdateResponse{
		Id:        *result.ID,
		ChannelId: *result.ChannelID,
		Content:   *result.Content,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// NewDeletePayload builds the payload of the "delete" endpoint of the "wiki"
// service from the gRPC request type.
func NewDeletePayload(message *wikipb.DeleteRequest, token *string) *wiki.DeletePayload {
	v := &wiki.DeletePayload{
		ID: message.Id,
	}
	v.Token = token
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "delete" endpoint of the "wiki" service.
func NewProtoDeleteResponse() *wikipb.DeleteResponse {
	message := &wikipb.DeleteResponse{}
	return message
}
