// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package client

import (
	"encoding/json"
	"fmt"

	wikipb "object-t.com/hackz-giganoto/microservices/wiki/gen/grpc/wiki/pb"
	wiki "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki"
)

// BuildShowPayload builds the payload for the wiki show endpoint from CLI
// flags.
func BuildShowPayload(wikiShowMessage string, wikiShowToken string) (*wiki.ShowPayload, error) {
	var err error
	var message wikipb.ShowRequest
	{
		if wikiShowMessage != "" {
			err = json.Unmarshal([]byte(wikiShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Adipisci voluptate expedita excepturi consequuntur magnam.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if wikiShowToken != "" {
			token = &wikiShowToken
		}
	}
	v := &wiki.ShowPayload{
		ID: message.Id,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the wiki create endpoint from CLI
// flags.
func BuildCreatePayload(wikiCreateMessage string, wikiCreateToken string) (*wiki.CreatePayload, error) {
	var err error
	var message wikipb.CreateRequest
	{
		if wikiCreateMessage != "" {
			err = json.Unmarshal([]byte(wikiCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"channel_id\": \"Asperiores consectetur et sint doloremque.\",\n      \"content\": \"Aperiam excepturi veritatis numquam.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if wikiCreateToken != "" {
			token = &wikiCreateToken
		}
	}
	v := &wiki.CreatePayload{
		ChannelID: message.ChannelId,
		Content:   message.Content,
	}
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the wiki update endpoint from CLI
// flags.
func BuildUpdatePayload(wikiUpdateMessage string, wikiUpdateToken string) (*wiki.UpdatePayload, error) {
	var err error
	var message wikipb.UpdateRequest
	{
		if wikiUpdateMessage != "" {
			err = json.Unmarshal([]byte(wikiUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content\": \"Ex occaecati.\",\n      \"id\": \"Eveniet perferendis velit ullam debitis repudiandae vero.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if wikiUpdateToken != "" {
			token = &wikiUpdateToken
		}
	}
	v := &wiki.UpdatePayload{
		ID:      message.Id,
		Content: message.Content,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the wiki delete endpoint from CLI
// flags.
func BuildDeletePayload(wikiDeleteMessage string, wikiDeleteToken string) (*wiki.DeletePayload, error) {
	var err error
	var message wikipb.DeleteRequest
	{
		if wikiDeleteMessage != "" {
			err = json.Unmarshal([]byte(wikiDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Vel voluptas quis sint fugiat minus.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if wikiDeleteToken != "" {
			token = &wikiDeleteToken
		}
	}
	v := &wiki.DeletePayload{
		ID: message.Id,
	}
	v.Token = token

	return v, nil
}
