// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki gRPC client encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	wikipb "object-t.com/hackz-giganoto/microservices/wiki/gen/grpc/wiki/pb"
	wiki "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki"
	wikiviews "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki/views"
)

// BuildShowFunc builds the remote method to invoke for "wiki" service "show"
// endpoint.
func BuildShowFunc(grpccli wikipb.WikiClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Show(ctx, reqpb.(*wikipb.ShowRequest), opts...)
		}
		return grpccli.Show(ctx, &wikipb.ShowRequest{}, opts...)
	}
}

// EncodeShowRequest encodes requests sent to wiki show endpoint.
func EncodeShowRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*wiki.ShowPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "show", "*wiki.ShowPayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoShowRequest(payload), nil
}

// DecodeShowResponse decodes responses from the wiki show endpoint.
func DecodeShowResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*wikipb.ShowResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "show", "*wikipb.ShowResponse", v)
	}
	res := NewShowResult(message)
	vres := &wikiviews.Wiki{Projected: res, View: view}
	if err := wikiviews.ValidateWiki(vres); err != nil {
		return nil, err
	}
	return wiki.NewWiki(vres), nil
}

// BuildCreateFunc builds the remote method to invoke for "wiki" service
// "create" endpoint.
func BuildCreateFunc(grpccli wikipb.WikiClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*wikipb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &wikipb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to wiki create endpoint.
func EncodeCreateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*wiki.CreatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "create", "*wiki.CreatePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the wiki create endpoint.
func DecodeCreateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*wikipb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "create", "*wikipb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	vres := &wikiviews.Wiki{Projected: res, View: view}
	if err := wikiviews.ValidateWiki(vres); err != nil {
		return nil, err
	}
	return wiki.NewWiki(vres), nil
}

// BuildUpdateFunc builds the remote method to invoke for "wiki" service
// "update" endpoint.
func BuildUpdateFunc(grpccli wikipb.WikiClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*wikipb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &wikipb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to wiki update endpoint.
func EncodeUpdateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*wiki.UpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "update", "*wiki.UpdatePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the wiki update endpoint.
func DecodeUpdateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*wikipb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "update", "*wikipb.UpdateResponse", v)
	}
	res := NewUpdateResult(message)
	vres := &wikiviews.Wiki{Projected: res, View: view}
	if err := wikiviews.ValidateWiki(vres); err != nil {
		return nil, err
	}
	return wiki.NewWiki(vres), nil
}

// BuildDeleteFunc builds the remote method to invoke for "wiki" service
// "delete" endpoint.
func BuildDeleteFunc(grpccli wikipb.WikiClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Delete(ctx, reqpb.(*wikipb.DeleteRequest), opts...)
		}
		return grpccli.Delete(ctx, &wikipb.DeleteRequest{}, opts...)
	}
}

// EncodeDeleteRequest encodes requests sent to wiki delete endpoint.
func EncodeDeleteRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*wiki.DeletePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("wiki", "delete", "*wiki.DeletePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoDeleteRequest(payload), nil
}
