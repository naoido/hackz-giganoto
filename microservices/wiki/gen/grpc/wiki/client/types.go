// Code generated by goa v3.21.1, DO NOT EDIT.
//
// wiki gRPC client types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/wiki/design

package client

import (
	goa "goa.design/goa/v3/pkg"
	wikipb "object-t.com/hackz-giganoto/microservices/wiki/gen/grpc/wiki/pb"
	wiki "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki"
	wikiviews "object-t.com/hackz-giganoto/microservices/wiki/gen/wiki/views"
)

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "wiki" service.
func NewProtoShowRequest(payload *wiki.ShowPayload) *wikipb.ShowRequest {
	message := &wikipb.ShowRequest{
		Id: payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the "wiki"
// service from the gRPC response type.
func NewShowResult(message *wikipb.ShowResponse) *wikiviews.WikiView {
	result := &wikiviews.WikiView{
		ID:        &message.Id,
		ChannelID: &message.ChannelId,
		Content:   &message.Content,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
	}
	return result
}

// NewProtoCreateRequest builds the gRPC request type from the payload of the
// "create" endpoint of the "wiki" service.
func NewProtoCreateRequest(payload *wiki.CreatePayload) *wikipb.CreateRequest {
	message := &wikipb.CreateRequest{
		ChannelId: payload.ChannelID,
		Content:   payload.Content,
	}
	return message
}

// NewCreateResult builds the result type of the "create" endpoint of the
// "wiki" service from the gRPC response type.
func NewCreateResult(message *wikipb.CreateResponse) *wikiviews.WikiView {
	result := &wikiviews.WikiView{
		ID:        &message.Id,
		ChannelID: &message.ChannelId,
		Content:   &message.Content,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
	}
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "wiki" service.
func NewProtoUpdateRequest(payload *wiki.UpdatePayload) *wikipb.UpdateRequest {
	message := &wikipb.UpdateRequest{
		Id:      payload.ID,
		Content: payload.Content,
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "wiki" service from the gRPC response type.
func NewUpdateResult(message *wikipb.UpdateResponse) *wikiviews.WikiView {
	result := &wikiviews.WikiView{
		ID:        &message.Id,
		ChannelID: &message.ChannelId,
		Content:   &message.Content,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
	}
	return result
}

// NewProtoDeleteRequest builds the gRPC request type from the payload of the
// "delete" endpoint of the "wiki" service.
func NewProtoDeleteRequest(payload *wiki.DeletePayload) *wikipb.DeleteRequest {
	message := &wikipb.DeleteRequest{
		Id: payload.ID,
	}
	return message
}

// ValidateShowResponse runs the validations defined on ShowResponse.
func ValidateShowResponse(message *wikipb.ShowResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}

// ValidateCreateResponse runs the validations defined on CreateResponse.
func ValidateCreateResponse(message *wikipb.CreateResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *wikipb.UpdateResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}
