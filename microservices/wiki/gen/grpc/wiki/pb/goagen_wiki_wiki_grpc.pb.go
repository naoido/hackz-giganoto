// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: goagen_wiki_wiki.proto

package wiki_v1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WikiClient is the client API for Wiki service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiClient interface {
	// Wiki取得
	Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error)
	// 新しいWikiを作成
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// 指定されたIDのWikiの内容を更新
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// 指定されたIDのWikiを削除
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type wikiClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiClient(cc grpc.ClientConnInterface) WikiClient {
	return &wikiClient{cc}
}

func (c *wikiClient) Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error) {
	out := new(ShowResponse)
	err := c.cc.Invoke(ctx, "/wiki.v1.Wiki/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/wiki.v1.Wiki/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/wiki.v1.Wiki/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/wiki.v1.Wiki/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WikiServer is the server API for Wiki service.
// All implementations must embed UnimplementedWikiServer
// for forward compatibility
type WikiServer interface {
	// Wiki取得
	Show(context.Context, *ShowRequest) (*ShowResponse, error)
	// 新しいWikiを作成
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// 指定されたIDのWikiの内容を更新
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// 指定されたIDのWikiを削除
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedWikiServer()
}

// UnimplementedWikiServer must be embedded to have forward compatible implementations.
type UnimplementedWikiServer struct {
}

func (UnimplementedWikiServer) Show(context.Context, *ShowRequest) (*ShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedWikiServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWikiServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWikiServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWikiServer) mustEmbedUnimplementedWikiServer() {}

// UnsafeWikiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiServer will
// result in compilation errors.
type UnsafeWikiServer interface {
	mustEmbedUnimplementedWikiServer()
}

func RegisterWikiServer(s grpc.ServiceRegistrar, srv WikiServer) {
	s.RegisterService(&Wiki_ServiceDesc, srv)
}

func _Wiki_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.v1.Wiki/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).Show(ctx, req.(*ShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.v1.Wiki/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.v1.Wiki/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wiki_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiki.v1.Wiki/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wiki_ServiceDesc is the grpc.ServiceDesc for Wiki service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wiki_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiki.v1.Wiki",
	HandlerType: (*WikiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _Wiki_Show_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Wiki_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Wiki_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Wiki_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goagen_wiki_wiki.proto",
}
