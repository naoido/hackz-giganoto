// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package cli

import (
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
	chatc "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `chat (create-room|history|room-list|join-room|invite-room|stream-room)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` chat create-room --token "Eaque laboriosam ducimus soluta."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		chatFlags = flag.NewFlagSet("chat", flag.ContinueOnError)

		chatCreateRoomFlags     = flag.NewFlagSet("create-room", flag.ExitOnError)
		chatCreateRoomTokenFlag = chatCreateRoomFlags.String("token", "REQUIRED", "")

		chatHistoryFlags       = flag.NewFlagSet("history", flag.ExitOnError)
		chatHistoryMessageFlag = chatHistoryFlags.String("message", "", "")
		chatHistoryTokenFlag   = chatHistoryFlags.String("token", "REQUIRED", "")

		chatRoomListFlags     = flag.NewFlagSet("room-list", flag.ExitOnError)
		chatRoomListTokenFlag = chatRoomListFlags.String("token", "REQUIRED", "")

		chatJoinRoomFlags       = flag.NewFlagSet("join-room", flag.ExitOnError)
		chatJoinRoomMessageFlag = chatJoinRoomFlags.String("message", "", "")
		chatJoinRoomTokenFlag   = chatJoinRoomFlags.String("token", "REQUIRED", "")

		chatInviteRoomFlags       = flag.NewFlagSet("invite-room", flag.ExitOnError)
		chatInviteRoomMessageFlag = chatInviteRoomFlags.String("message", "", "")
		chatInviteRoomTokenFlag   = chatInviteRoomFlags.String("token", "REQUIRED", "")

		chatStreamRoomFlags      = flag.NewFlagSet("stream-room", flag.ExitOnError)
		chatStreamRoomTokenFlag  = chatStreamRoomFlags.String("token", "REQUIRED", "")
		chatStreamRoomRoomIDFlag = chatStreamRoomFlags.String("room-id", "REQUIRED", "")
	)
	chatFlags.Usage = chatUsage
	chatCreateRoomFlags.Usage = chatCreateRoomUsage
	chatHistoryFlags.Usage = chatHistoryUsage
	chatRoomListFlags.Usage = chatRoomListUsage
	chatJoinRoomFlags.Usage = chatJoinRoomUsage
	chatInviteRoomFlags.Usage = chatInviteRoomUsage
	chatStreamRoomFlags.Usage = chatStreamRoomUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "chat":
			svcf = chatFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "chat":
			switch epn {
			case "create-room":
				epf = chatCreateRoomFlags

			case "history":
				epf = chatHistoryFlags

			case "room-list":
				epf = chatRoomListFlags

			case "join-room":
				epf = chatJoinRoomFlags

			case "invite-room":
				epf = chatInviteRoomFlags

			case "stream-room":
				epf = chatStreamRoomFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "chat":
			c := chatc.NewClient(cc, opts...)
			switch epn {
			case "create-room":
				endpoint = c.CreateRoom()
				data, err = chatc.BuildCreateRoomPayload(*chatCreateRoomTokenFlag)
			case "history":
				endpoint = c.History()
				data, err = chatc.BuildHistoryPayload(*chatHistoryMessageFlag, *chatHistoryTokenFlag)
			case "room-list":
				endpoint = c.RoomList()
				data, err = chatc.BuildRoomListPayload(*chatRoomListTokenFlag)
			case "join-room":
				endpoint = c.JoinRoom()
				data, err = chatc.BuildJoinRoomPayload(*chatJoinRoomMessageFlag, *chatJoinRoomTokenFlag)
			case "invite-room":
				endpoint = c.InviteRoom()
				data, err = chatc.BuildInviteRoomPayload(*chatInviteRoomMessageFlag, *chatInviteRoomTokenFlag)
			case "stream-room":
				endpoint = c.StreamRoom()
				data, err = chatc.BuildStreamRoomPayload(*chatStreamRoomTokenFlag, *chatStreamRoomRoomIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// chatUsage displays the usage of the chat command and its subcommands.
func chatUsage() {
	fmt.Fprintf(os.Stderr, `Real-time chat service with bidirectional streaming
Usage:
    %[1]s [globalflags] chat COMMAND [flags]

COMMAND:
    create-room: Creates a new chat room
    history: Get all chat rooms history
    room-list: Get all chat rooms history
    join-room: Creates a new chat room
    invite-room: Creates a new chat room
    stream-room: Streams chat room events on a chat room

Additional help:
    %[1]s chat COMMAND --help
`, os.Args[0])
}
func chatCreateRoomUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat create-room -token STRING

Creates a new chat room
    -token STRING: 

Example:
    %[1]s chat create-room --token "Eaque laboriosam ducimus soluta."
`, os.Args[0])
}

func chatHistoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat history -message JSON -token STRING

Get all chat rooms history
    -message JSON: 
    -token STRING: 

Example:
    %[1]s chat history --message '{
      "room_id": "Atque voluptate explicabo est sed."
   }' --token "Rerum sapiente reiciendis nobis et voluptatem."
`, os.Args[0])
}

func chatRoomListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat room-list -token STRING

Get all chat rooms history
    -token STRING: 

Example:
    %[1]s chat room-list --token "Et officiis qui."
`, os.Args[0])
}

func chatJoinRoomUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat join-room -message JSON -token STRING

Creates a new chat room
    -message JSON: 
    -token STRING: 

Example:
    %[1]s chat join-room --message '{
      "invite_key": "Placeat enim."
   }' --token "Reprehenderit voluptas esse quis."
`, os.Args[0])
}

func chatInviteRoomUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat invite-room -message JSON -token STRING

Creates a new chat room
    -message JSON: 
    -token STRING: 

Example:
    %[1]s chat invite-room --message '{
      "room_id": "Culpa eveniet rerum nam suscipit reiciendis sed.",
      "user_id": "Labore culpa."
   }' --token "Totam ea ipsa."
`, os.Args[0])
}

func chatStreamRoomUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat stream-room -token STRING -room-id STRING

Streams chat room events on a chat room
    -token STRING: 
    -room-id STRING: 

Example:
    %[1]s chat stream-room --token "Et doloremque non mollitia." --room-id "Accusamus sunt."
`, os.Args[0])
}
