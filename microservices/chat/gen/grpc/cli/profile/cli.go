// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package cli

import (
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
	chatc "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/client"
	profilec "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/profile/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `profile (get-profile|update-profile|get-profile-by-id)
chat (send-message|join-chat|get-chat-history)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` profile get-profile --token "Voluptas non qui consequatur fuga."` + "\n" +
		os.Args[0] + ` chat send-message --message '{
      "message": "Repellendus iure ratione.",
      "message_type": "Est consectetur et fugit est tenetur.",
      "room_id": "Commodi aut voluptatem."
   }' --token "Qui quidem quas reiciendis libero sed."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		profileFlags = flag.NewFlagSet("profile", flag.ContinueOnError)

		profileGetProfileFlags     = flag.NewFlagSet("get-profile", flag.ExitOnError)
		profileGetProfileTokenFlag = profileGetProfileFlags.String("token", "", "")

		profileUpdateProfileFlags       = flag.NewFlagSet("update-profile", flag.ExitOnError)
		profileUpdateProfileMessageFlag = profileUpdateProfileFlags.String("message", "", "")
		profileUpdateProfileTokenFlag   = profileUpdateProfileFlags.String("token", "", "")

		profileGetProfileByIDFlags       = flag.NewFlagSet("get-profile-by-id", flag.ExitOnError)
		profileGetProfileByIDMessageFlag = profileGetProfileByIDFlags.String("message", "", "")
		profileGetProfileByIDTokenFlag   = profileGetProfileByIDFlags.String("token", "", "")

		chatFlags = flag.NewFlagSet("chat", flag.ContinueOnError)

		chatSendMessageFlags       = flag.NewFlagSet("send-message", flag.ExitOnError)
		chatSendMessageMessageFlag = chatSendMessageFlags.String("message", "", "")
		chatSendMessageTokenFlag   = chatSendMessageFlags.String("token", "", "")

		chatJoinChatFlags       = flag.NewFlagSet("join-chat", flag.ExitOnError)
		chatJoinChatMessageFlag = chatJoinChatFlags.String("message", "", "")
		chatJoinChatTokenFlag   = chatJoinChatFlags.String("token", "", "")

		chatGetChatHistoryFlags       = flag.NewFlagSet("get-chat-history", flag.ExitOnError)
		chatGetChatHistoryMessageFlag = chatGetChatHistoryFlags.String("message", "", "")
		chatGetChatHistoryTokenFlag   = chatGetChatHistoryFlags.String("token", "", "")
	)
	profileFlags.Usage = profileUsage
	profileGetProfileFlags.Usage = profileGetProfileUsage
	profileUpdateProfileFlags.Usage = profileUpdateProfileUsage
	profileGetProfileByIDFlags.Usage = profileGetProfileByIDUsage

	chatFlags.Usage = chatUsage
	chatSendMessageFlags.Usage = chatSendMessageUsage
	chatJoinChatFlags.Usage = chatJoinChatUsage
	chatGetChatHistoryFlags.Usage = chatGetChatHistoryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "profile":
			svcf = profileFlags
		case "chat":
			svcf = chatFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "profile":
			switch epn {
			case "get-profile":
				epf = profileGetProfileFlags

			case "update-profile":
				epf = profileUpdateProfileFlags

			case "get-profile-by-id":
				epf = profileGetProfileByIDFlags

			}

		case "chat":
			switch epn {
			case "send-message":
				epf = chatSendMessageFlags

			case "join-chat":
				epf = chatJoinChatFlags

			case "get-chat-history":
				epf = chatGetChatHistoryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "profile":
			c := profilec.NewClient(cc, opts...)
			switch epn {
			case "get-profile":
				endpoint = c.GetProfile()
				data, err = profilec.BuildGetProfilePayload(*profileGetProfileTokenFlag)
			case "update-profile":
				endpoint = c.UpdateProfile()
				data, err = profilec.BuildUpdateProfilePayload(*profileUpdateProfileMessageFlag, *profileUpdateProfileTokenFlag)
			case "get-profile-by-id":
				endpoint = c.GetProfileByID()
				data, err = profilec.BuildGetProfileByIDPayload(*profileGetProfileByIDMessageFlag, *profileGetProfileByIDTokenFlag)
			}
		case "chat":
			c := chatc.NewClient(cc, opts...)
			switch epn {
			case "send-message":
				endpoint = c.SendMessage()
				data, err = chatc.BuildSendMessagePayload(*chatSendMessageMessageFlag, *chatSendMessageTokenFlag)
			case "join-chat":
				endpoint = c.JoinChat()
				data, err = chatc.BuildJoinChatPayload(*chatJoinChatMessageFlag, *chatJoinChatTokenFlag)
			case "get-chat-history":
				endpoint = c.GetChatHistory()
				data, err = chatc.BuildGetChatHistoryPayload(*chatGetChatHistoryMessageFlag, *chatGetChatHistoryTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// profileUsage displays the usage of the profile command and its subcommands.
func profileUsage() {
	fmt.Fprintf(os.Stderr, `User profile management service
Usage:
    %[1]s [globalflags] profile COMMAND [flags]

COMMAND:
    get-profile: Get user profile
    update-profile: Update user profile
    get-profile-by-id: Get profile by user ID (for internal service communication)

Additional help:
    %[1]s profile COMMAND --help
`, os.Args[0])
}
func profileGetProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile get-profile -token STRING

Get user profile
    -token STRING: 

Example:
    %[1]s profile get-profile --token "Voluptas non qui consequatur fuga."
`, os.Args[0])
}

func profileUpdateProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile update-profile -message JSON -token STRING

Update user profile
    -message JSON: 
    -token STRING: 

Example:
    %[1]s profile update-profile --message '{
      "name": "Mollitia ea ex molestias."
   }' --token "Iusto eius."
`, os.Args[0])
}

func profileGetProfileByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile get-profile-by-id -message JSON -token STRING

Get profile by user ID (for internal service communication)
    -message JSON: 
    -token STRING: 

Example:
    %[1]s profile get-profile-by-id --message '{
      "user_id": "Libero quia harum soluta voluptatibus beatae in."
   }' --token "Reiciendis vitae."
`, os.Args[0])
}

// chatUsage displays the usage of the chat command and its subcommands.
func chatUsage() {
	fmt.Fprintf(os.Stderr, `Bidirectional chat service
Usage:
    %[1]s [globalflags] chat COMMAND [flags]

COMMAND:
    send-message: Send a message to a chat room
    join-chat: Join a chat room and receive messages
    get-chat-history: Get chat history for a room

Additional help:
    %[1]s chat COMMAND --help
`, os.Args[0])
}
func chatSendMessageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat send-message -message JSON -token STRING

Send a message to a chat room
    -message JSON: 
    -token STRING: 

Example:
    %[1]s chat send-message --message '{
      "message": "Repellendus iure ratione.",
      "message_type": "Est consectetur et fugit est tenetur.",
      "room_id": "Commodi aut voluptatem."
   }' --token "Qui quidem quas reiciendis libero sed."
`, os.Args[0])
}

func chatJoinChatUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat join-chat -message JSON -token STRING

Join a chat room and receive messages
    -message JSON: 
    -token STRING: 

Example:
    %[1]s chat join-chat --message '{
      "room_id": "Ut repellat id voluptas dolore."
   }' --token "Dicta sed maiores incidunt nostrum."
`, os.Args[0])
}

func chatGetChatHistoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chat get-chat-history -message JSON -token STRING

Get chat history for a room
    -message JSON: 
    -token STRING: 

Example:
    %[1]s chat get-chat-history --message '{
      "limit": 5822586653971467938,
      "offset": 8299041473847685240,
      "room_id": "Et voluptatem dolores sequi rerum laudantium est."
   }' --token "Est ut impedit ut aut veritatis voluptatum."
`, os.Args[0])
}
