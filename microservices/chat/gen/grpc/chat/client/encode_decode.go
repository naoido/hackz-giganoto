// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// BuildSendMessageFunc builds the remote method to invoke for "chat" service
// "send_message" endpoint.
func BuildSendMessageFunc(grpccli chatpb.ChatClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.SendMessage(ctx, reqpb.(*chatpb.SendMessageRequest), opts...)
		}
		return grpccli.SendMessage(ctx, &chatpb.SendMessageRequest{}, opts...)
	}
}

// EncodeSendMessageRequest encodes requests sent to chat send_message endpoint.
func EncodeSendMessageRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*chat.SendMessagePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "send_message", "*chat.SendMessagePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoSendMessageRequest(payload), nil
}

// DecodeSendMessageResponse decodes responses from the chat send_message
// endpoint.
func DecodeSendMessageResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*chatpb.SendMessageResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "send_message", "*chatpb.SendMessageResponse", v)
	}
	res := NewSendMessageResult(message)
	return res, nil
}

// BuildJoinChatFunc builds the remote method to invoke for "chat" service
// "join_chat" endpoint.
func BuildJoinChatFunc(grpccli chatpb.ChatClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.JoinChat(ctx, reqpb.(*chatpb.JoinChatRequest), opts...)
		}
		return grpccli.JoinChat(ctx, &chatpb.JoinChatRequest{}, opts...)
	}
}

// EncodeJoinChatRequest encodes requests sent to chat join_chat endpoint.
func EncodeJoinChatRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*chat.JoinChatPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "join_chat", "*chat.JoinChatPayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoJoinChatRequest(payload), nil
}

// DecodeJoinChatResponse decodes responses from the chat join_chat endpoint.
func DecodeJoinChatResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &JoinChatClientStream{
		stream: v.(chatpb.Chat_JoinChatClient),
	}, nil
}

// BuildGetChatHistoryFunc builds the remote method to invoke for "chat"
// service "get_chat_history" endpoint.
func BuildGetChatHistoryFunc(grpccli chatpb.ChatClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetChatHistory(ctx, reqpb.(*chatpb.GetChatHistoryRequest), opts...)
		}
		return grpccli.GetChatHistory(ctx, &chatpb.GetChatHistoryRequest{}, opts...)
	}
}

// EncodeGetChatHistoryRequest encodes requests sent to chat get_chat_history
// endpoint.
func EncodeGetChatHistoryRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*chat.GetChatHistoryPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "get_chat_history", "*chat.GetChatHistoryPayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoGetChatHistoryRequest(payload), nil
}

// DecodeGetChatHistoryResponse decodes responses from the chat
// get_chat_history endpoint.
func DecodeGetChatHistoryResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*chatpb.GetChatHistoryResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "get_chat_history", "*chatpb.GetChatHistoryResponse", v)
	}
	if err := ValidateGetChatHistoryResponse(message); err != nil {
		return nil, err
	}
	res := NewGetChatHistoryResult(message)
	return res, nil
}
