// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package client

import (
	"encoding/json"
	"fmt"

	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// BuildSendMessagePayload builds the payload for the chat send_message
// endpoint from CLI flags.
func BuildSendMessagePayload(chatSendMessageMessage string, chatSendMessageToken string) (*chat.SendMessagePayload, error) {
	var err error
	var message chatpb.SendMessageRequest
	{
		if chatSendMessageMessage != "" {
			err = json.Unmarshal([]byte(chatSendMessageMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"message\": \"Repellendus iure ratione.\",\n      \"message_type\": \"Est consectetur et fugit est tenetur.\",\n      \"room_id\": \"Commodi aut voluptatem.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if chatSendMessageToken != "" {
			token = &chatSendMessageToken
		}
	}
	v := &chat.SendMessagePayload{
		RoomID:      message.RoomId,
		Message:     message.Message_,
		MessageType: message.MessageType,
	}
	v.Token = token

	return v, nil
}

// BuildJoinChatPayload builds the payload for the chat join_chat endpoint from
// CLI flags.
func BuildJoinChatPayload(chatJoinChatMessage string, chatJoinChatToken string) (*chat.JoinChatPayload, error) {
	var err error
	var message chatpb.JoinChatRequest
	{
		if chatJoinChatMessage != "" {
			err = json.Unmarshal([]byte(chatJoinChatMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"room_id\": \"Ut repellat id voluptas dolore.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if chatJoinChatToken != "" {
			token = &chatJoinChatToken
		}
	}
	v := &chat.JoinChatPayload{
		RoomID: message.RoomId,
	}
	v.Token = token

	return v, nil
}

// BuildGetChatHistoryPayload builds the payload for the chat get_chat_history
// endpoint from CLI flags.
func BuildGetChatHistoryPayload(chatGetChatHistoryMessage string, chatGetChatHistoryToken string) (*chat.GetChatHistoryPayload, error) {
	var err error
	var message chatpb.GetChatHistoryRequest
	{
		if chatGetChatHistoryMessage != "" {
			err = json.Unmarshal([]byte(chatGetChatHistoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 5822586653971467938,\n      \"offset\": 8299041473847685240,\n      \"room_id\": \"Et voluptatem dolores sequi rerum laudantium est.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if chatGetChatHistoryToken != "" {
			token = &chatGetChatHistoryToken
		}
	}
	v := &chat.GetChatHistoryPayload{
		RoomID: message.RoomId,
	}
	if message.Limit != nil {
		limit := int(*message.Limit)
		v.Limit = &limit
	}
	if message.Offset != nil {
		offset := int(*message.Offset)
		v.Offset = &offset
	}
	v.Token = token

	return v, nil
}
