// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package client

import (
	"encoding/json"
	"fmt"

	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// BuildCreateRoomPayload builds the payload for the chat create-room endpoint
// from CLI flags.
func BuildCreateRoomPayload(chatCreateRoomToken string) (*chat.CreateRoomPayload, error) {
	var token string
	{
		token = chatCreateRoomToken
	}
	v := &chat.CreateRoomPayload{}
	v.Token = token

	return v, nil
}

// BuildHistoryPayload builds the payload for the chat history endpoint from
// CLI flags.
func BuildHistoryPayload(chatHistoryMessage string, chatHistoryToken string) (*chat.HistoryPayload, error) {
	var err error
	var message chatpb.HistoryRequest
	{
		if chatHistoryMessage != "" {
			err = json.Unmarshal([]byte(chatHistoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"room_id\": \"Rerum sapiente reiciendis nobis et voluptatem.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = chatHistoryToken
	}
	v := &chat.HistoryPayload{
		RoomID: message.RoomId,
	}
	v.Token = token

	return v, nil
}

// BuildRoomListPayload builds the payload for the chat room-list endpoint from
// CLI flags.
func BuildRoomListPayload(chatRoomListToken string) (*chat.RoomListPayload, error) {
	var token string
	{
		token = chatRoomListToken
	}
	v := &chat.RoomListPayload{}
	v.Token = token

	return v, nil
}

// BuildJoinRoomPayload builds the payload for the chat join-room endpoint from
// CLI flags.
func BuildJoinRoomPayload(chatJoinRoomMessage string, chatJoinRoomToken string) (*chat.JoinRoomPayload, error) {
	var err error
	var message chatpb.JoinRoomRequest
	{
		if chatJoinRoomMessage != "" {
			err = json.Unmarshal([]byte(chatJoinRoomMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"invite_key\": \"Enim voluptas.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = chatJoinRoomToken
	}
	v := &chat.JoinRoomPayload{
		InviteKey: message.InviteKey,
	}
	v.Token = token

	return v, nil
}

// BuildInviteRoomPayload builds the payload for the chat invite-room endpoint
// from CLI flags.
func BuildInviteRoomPayload(chatInviteRoomMessage string, chatInviteRoomToken string) (*chat.InviteRoomPayload, error) {
	var err error
	var message chatpb.InviteRoomRequest
	{
		if chatInviteRoomMessage != "" {
			err = json.Unmarshal([]byte(chatInviteRoomMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"room_id\": \"Sed ipsam.\",\n      \"user_id\": \"Culpa laudantium qui esse non dolorem et.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = chatInviteRoomToken
	}
	v := &chat.InviteRoomPayload{
		RoomID: message.RoomId,
		UserID: message.UserId,
	}
	v.Token = token

	return v, nil
}

// BuildStreamRoomPayload builds the payload for the chat stream-room endpoint
// from CLI flags.
func BuildStreamRoomPayload(chatStreamRoomToken string, chatStreamRoomRoomID string) (*chat.StreamRoomPayload, error) {
	var token string
	{
		token = chatStreamRoomToken
	}
	var roomID string
	{
		roomID = chatStreamRoomRoomID
	}
	v := &chat.StreamRoomPayload{}
	v.Token = token
	v.RoomID = roomID

	return v, nil
}
