// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package client

import (
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// NewProtoCreateRoomRequest builds the gRPC request type from the payload of
// the "create-room" endpoint of the "chat" service.
func NewProtoCreateRoomRequest() *chatpb.CreateRoomRequest {
	message := &chatpb.CreateRoomRequest{}
	return message
}

// NewCreateRoomResult builds the result type of the "create-room" endpoint of
// the "chat" service from the gRPC response type.
func NewCreateRoomResult(message *chatpb.CreateRoomResponse) string {
	result := message.Field
	return result
}

// NewProtoHistoryRequest builds the gRPC request type from the payload of the
// "history" endpoint of the "chat" service.
func NewProtoHistoryRequest(payload *chat.HistoryPayload) *chatpb.HistoryRequest {
	message := &chatpb.HistoryRequest{
		RoomId: payload.RoomID,
	}
	return message
}

// NewHistoryResult builds the result type of the "history" endpoint of the
// "chat" service from the gRPC response type.
func NewHistoryResult(message *chatpb.HistoryResponse) []*chat.Chat {
	result := make([]*chat.Chat, len(message.Field))
	for i, val := range message.Field {
		result[i] = &chat.Chat{
			UserID:    val.UserId,
			Message:   val.Message_,
			ID:        val.Id,
			CreatedAt: val.CreatedAt,
			UpdatedAt: val.UpdatedAt,
			RoomID:    val.RoomId,
		}
	}
	return result
}

// NewProtoRoomListRequest builds the gRPC request type from the payload of the
// "room-list" endpoint of the "chat" service.
func NewProtoRoomListRequest() *chatpb.RoomListRequest {
	message := &chatpb.RoomListRequest{}
	return message
}

// NewRoomListResult builds the result type of the "room-list" endpoint of the
// "chat" service from the gRPC response type.
func NewRoomListResult(message *chatpb.RoomListResponse) []string {
	result := make([]string, len(message.Field))
	for i, val := range message.Field {
		result[i] = val
	}
	return result
}

// NewProtoJoinRoomRequest builds the gRPC request type from the payload of the
// "join-room" endpoint of the "chat" service.
func NewProtoJoinRoomRequest(payload *chat.JoinRoomPayload) *chatpb.JoinRoomRequest {
	message := &chatpb.JoinRoomRequest{
		InviteKey: payload.InviteKey,
	}
	return message
}

// NewJoinRoomResult builds the result type of the "join-room" endpoint of the
// "chat" service from the gRPC response type.
func NewJoinRoomResult(message *chatpb.JoinRoomResponse) string {
	result := message.Field
	return result
}

// NewProtoInviteRoomRequest builds the gRPC request type from the payload of
// the "invite-room" endpoint of the "chat" service.
func NewProtoInviteRoomRequest(payload *chat.InviteRoomPayload) *chatpb.InviteRoomRequest {
	message := &chatpb.InviteRoomRequest{
		RoomId: payload.RoomID,
		UserId: payload.UserID,
	}
	return message
}

// NewInviteRoomResult builds the result type of the "invite-room" endpoint of
// the "chat" service from the gRPC response type.
func NewInviteRoomResult(message *chatpb.InviteRoomResponse) string {
	result := message.Field
	return result
}

func NewStreamRoomResponseChat2(v *chatpb.StreamRoomResponse) *chat.Chat {
	result := &chat.Chat{
		UserID:    v.UserId,
		Message:   v.Message_,
		ID:        v.Id,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		RoomID:    v.RoomId,
	}
	return result
}

func NewProtoStreamRoomStreamingRequest(spayload string) *chatpb.StreamRoomStreamingRequest {
	v := &chatpb.StreamRoomStreamingRequest{}
	v.Field = spayload
	return v
}
