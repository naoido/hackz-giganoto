// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package client

import (
	goa "goa.design/goa/v3/pkg"
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// NewProtoSendMessageRequest builds the gRPC request type from the payload of
// the "send_message" endpoint of the "chat" service.
func NewProtoSendMessageRequest(payload *chat.SendMessagePayload) *chatpb.SendMessageRequest {
	message := &chatpb.SendMessageRequest{
		RoomId:      payload.RoomID,
		Message_:    payload.Message,
		MessageType: payload.MessageType,
	}
	return message
}

// NewSendMessageResult builds the result type of the "send_message" endpoint
// of the "chat" service from the gRPC response type.
func NewSendMessageResult(message *chatpb.SendMessageResponse) *chat.SendMessageResult {
	result := &chat.SendMessageResult{
		MessageID: message.MessageId,
		Timestamp: message.Timestamp,
	}
	return result
}

// NewProtoJoinChatRequest builds the gRPC request type from the payload of the
// "join_chat" endpoint of the "chat" service.
func NewProtoJoinChatRequest(payload *chat.JoinChatPayload) *chatpb.JoinChatRequest {
	message := &chatpb.JoinChatRequest{
		RoomId: payload.RoomID,
	}
	return message
}

func NewJoinChatResponseJoinChatResult(v *chatpb.JoinChatResponse) *chat.JoinChatResult {
	result := &chat.JoinChatResult{
		MessageID:   v.MessageId,
		UserID:      v.UserId,
		UserName:    v.UserName,
		Message:     v.Message_,
		MessageType: v.MessageType,
		Timestamp:   v.Timestamp,
	}
	return result
}

// NewProtoGetChatHistoryRequest builds the gRPC request type from the payload
// of the "get_chat_history" endpoint of the "chat" service.
func NewProtoGetChatHistoryRequest(payload *chat.GetChatHistoryPayload) *chatpb.GetChatHistoryRequest {
	message := &chatpb.GetChatHistoryRequest{
		RoomId: payload.RoomID,
	}
	if payload.Limit != nil {
		limit := int32(*payload.Limit)
		message.Limit = &limit
	}
	if payload.Offset != nil {
		offset := int32(*payload.Offset)
		message.Offset = &offset
	}
	return message
}

// NewGetChatHistoryResult builds the result type of the "get_chat_history"
// endpoint of the "chat" service from the gRPC response type.
func NewGetChatHistoryResult(message *chatpb.GetChatHistoryResponse) *chat.GetChatHistoryResult {
	result := &chat.GetChatHistoryResult{
		TotalCount: int(message.TotalCount),
	}
	if message.Messages != nil {
		result.Messages = make([]*chat.ChatMessage, len(message.Messages))
		for i, val := range message.Messages {
			result.Messages[i] = &chat.ChatMessage{
				MessageID:   val.MessageId,
				UserID:      val.UserId,
				UserName:    val.UserName,
				Message:     val.Message_,
				MessageType: val.MessageType,
				Timestamp:   val.Timestamp,
			}
		}
	}
	return result
}

// ValidateGetChatHistoryResponse runs the validations defined on
// GetChatHistoryResponse.
func ValidateGetChatHistoryResponse(message *chatpb.GetChatHistoryResponse) (err error) {
	if message.Messages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("messages", "message"))
	}
	return
}
