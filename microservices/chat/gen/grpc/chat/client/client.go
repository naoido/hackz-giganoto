// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli chatpb.ChatClient
	opts    []grpc.CallOption
}

// JoinChatClientStream implements the chat.JoinChatClientStream interface.
type JoinChatClientStream struct {
	stream chatpb.Chat_JoinChatClient
}

// NewClient instantiates gRPC client for all the chat service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: chatpb.NewChatClient(cc),
		opts:    opts,
	}
}

// SendMessage calls the "SendMessage" function in chatpb.ChatClient interface.
func (c *Client) SendMessage() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildSendMessageFunc(c.grpccli, c.opts...),
			EncodeSendMessageRequest,
			DecodeSendMessageResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}

// JoinChat calls the "JoinChat" function in chatpb.ChatClient interface.
func (c *Client) JoinChat() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildJoinChatFunc(c.grpccli, c.opts...),
			EncodeJoinChatRequest,
			DecodeJoinChatResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}

// GetChatHistory calls the "GetChatHistory" function in chatpb.ChatClient
// interface.
func (c *Client) GetChatHistory() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildGetChatHistoryFunc(c.grpccli, c.opts...),
			EncodeGetChatHistoryRequest,
			DecodeGetChatHistoryResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}

// Recv reads instances of "chatpb.JoinChatResponse" from the "join_chat"
// endpoint gRPC stream.
func (s *JoinChatClientStream) Recv() (*chat.JoinChatResult, error) {
	var res *chat.JoinChatResult
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewJoinChatResponseJoinChatResult(v), nil
}

// RecvWithContext reads instances of "chatpb.JoinChatResponse" from the
// "join_chat" endpoint gRPC stream with context.
func (s *JoinChatClientStream) RecvWithContext(ctx context.Context) (*chat.JoinChatResult, error) {
	return s.Recv()
}
