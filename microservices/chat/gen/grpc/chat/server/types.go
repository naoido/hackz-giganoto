// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package server

import (
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// NewCreateRoomPayload builds the payload of the "create-room" endpoint of the
// "chat" service from the gRPC request type.
func NewCreateRoomPayload(token string) *chat.CreateRoomPayload {
	v := &chat.CreateRoomPayload{}
	v.Token = token
	return v
}

// NewProtoCreateRoomResponse builds the gRPC response type from the result of
// the "create-room" endpoint of the "chat" service.
func NewProtoCreateRoomResponse(result string) *chatpb.CreateRoomResponse {
	message := &chatpb.CreateRoomResponse{}
	message.Field = result
	return message
}

// NewHistoryPayload builds the payload of the "history" endpoint of the "chat"
// service from the gRPC request type.
func NewHistoryPayload(message *chatpb.HistoryRequest, token string) *chat.HistoryPayload {
	v := &chat.HistoryPayload{
		RoomID: message.RoomId,
	}
	v.Token = token
	return v
}

// NewProtoHistoryResponse builds the gRPC response type from the result of the
// "history" endpoint of the "chat" service.
func NewProtoHistoryResponse(result []*chat.Chat) *chatpb.HistoryResponse {
	message := &chatpb.HistoryResponse{}
	message.Field = make([]*chatpb.Chat2, len(result))
	for i, val := range result {
		message.Field[i] = &chatpb.Chat2{
			UserId:    val.UserID,
			Message_:  val.Message,
			Id:        val.ID,
			CreatedAt: val.CreatedAt,
			UpdatedAt: val.UpdatedAt,
			RoomId:    val.RoomID,
		}
	}
	return message
}

// NewRoomListPayload builds the payload of the "room-list" endpoint of the
// "chat" service from the gRPC request type.
func NewRoomListPayload(token string) *chat.RoomListPayload {
	v := &chat.RoomListPayload{}
	v.Token = token
	return v
}

// NewProtoRoomListResponse builds the gRPC response type from the result of
// the "room-list" endpoint of the "chat" service.
func NewProtoRoomListResponse(result []string) *chatpb.RoomListResponse {
	message := &chatpb.RoomListResponse{}
	message.Field = make([]string, len(result))
	for i, val := range result {
		message.Field[i] = val
	}
	return message
}

// NewJoinRoomPayload builds the payload of the "join-room" endpoint of the
// "chat" service from the gRPC request type.
func NewJoinRoomPayload(message *chatpb.JoinRoomRequest, token string) *chat.JoinRoomPayload {
	v := &chat.JoinRoomPayload{
		InviteKey: message.InviteKey,
	}
	v.Token = token
	return v
}

// NewProtoJoinRoomResponse builds the gRPC response type from the result of
// the "join-room" endpoint of the "chat" service.
func NewProtoJoinRoomResponse(result string) *chatpb.JoinRoomResponse {
	message := &chatpb.JoinRoomResponse{}
	message.Field = result
	return message
}

// NewInviteRoomPayload builds the payload of the "invite-room" endpoint of the
// "chat" service from the gRPC request type.
func NewInviteRoomPayload(message *chatpb.InviteRoomRequest, token string) *chat.InviteRoomPayload {
	v := &chat.InviteRoomPayload{
		RoomID: message.RoomId,
		UserID: message.UserId,
	}
	v.Token = token
	return v
}

// NewProtoInviteRoomResponse builds the gRPC response type from the result of
// the "invite-room" endpoint of the "chat" service.
func NewProtoInviteRoomResponse(result string) *chatpb.InviteRoomResponse {
	message := &chatpb.InviteRoomResponse{}
	message.Field = result
	return message
}

// NewStreamRoomPayload builds the payload of the "stream-room" endpoint of the
// "chat" service from the gRPC request type.
func NewStreamRoomPayload(token string, roomID string) *chat.StreamRoomPayload {
	v := &chat.StreamRoomPayload{}
	v.Token = token
	v.RoomID = roomID
	return v
}

// NewProtoStreamRoomResponse builds the gRPC response type from the result of
// the "stream-room" endpoint of the "chat" service.
func NewProtoStreamRoomResponse(result *chat.Chat) *chatpb.StreamRoomResponse {
	message := &chatpb.StreamRoomResponse{
		UserId:    result.UserID,
		Message_:  result.Message,
		Id:        result.ID,
		CreatedAt: result.CreatedAt,
		UpdatedAt: result.UpdatedAt,
		RoomId:    result.RoomID,
	}
	return message
}

func NewProtoChat2StreamRoomResponse(result *chat.Chat) *chatpb.StreamRoomResponse {
	v := &chatpb.StreamRoomResponse{
		UserId:    result.UserID,
		Message_:  result.Message,
		Id:        result.ID,
		CreatedAt: result.CreatedAt,
		UpdatedAt: result.UpdatedAt,
		RoomId:    result.RoomID,
	}
	return v
}

func NewStreamRoomStreamingRequestStreamRoomStreamingRequest(v *chatpb.StreamRoomStreamingRequest) string {
	spayload := v.Field
	return spayload
}
