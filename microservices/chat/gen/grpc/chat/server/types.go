// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package server

import (
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// NewSendMessagePayload builds the payload of the "send_message" endpoint of
// the "chat" service from the gRPC request type.
func NewSendMessagePayload(message *chatpb.SendMessageRequest, token *string) *chat.SendMessagePayload {
	v := &chat.SendMessagePayload{
		RoomID:      message.RoomId,
		Message:     message.Message_,
		MessageType: message.MessageType,
	}
	v.Token = token
	return v
}

// NewProtoSendMessageResponse builds the gRPC response type from the result of
// the "send_message" endpoint of the "chat" service.
func NewProtoSendMessageResponse(result *chat.SendMessageResult) *chatpb.SendMessageResponse {
	message := &chatpb.SendMessageResponse{
		MessageId: result.MessageID,
		Timestamp: result.Timestamp,
	}
	return message
}

// NewJoinChatPayload builds the payload of the "join_chat" endpoint of the
// "chat" service from the gRPC request type.
func NewJoinChatPayload(message *chatpb.JoinChatRequest, token *string) *chat.JoinChatPayload {
	v := &chat.JoinChatPayload{
		RoomID: message.RoomId,
	}
	v.Token = token
	return v
}

// NewProtoJoinChatResponse builds the gRPC response type from the result of
// the "join_chat" endpoint of the "chat" service.
func NewProtoJoinChatResponse(result *chat.JoinChatResult) *chatpb.JoinChatResponse {
	message := &chatpb.JoinChatResponse{
		MessageId:   result.MessageID,
		UserId:      result.UserID,
		UserName:    result.UserName,
		Message_:    result.Message,
		MessageType: result.MessageType,
		Timestamp:   result.Timestamp,
	}
	return message
}

func NewProtoJoinChatResultJoinChatResponse(result *chat.JoinChatResult) *chatpb.JoinChatResponse {
	v := &chatpb.JoinChatResponse{
		MessageId:   result.MessageID,
		UserId:      result.UserID,
		UserName:    result.UserName,
		Message_:    result.Message,
		MessageType: result.MessageType,
		Timestamp:   result.Timestamp,
	}
	return v
}

// NewGetChatHistoryPayload builds the payload of the "get_chat_history"
// endpoint of the "chat" service from the gRPC request type.
func NewGetChatHistoryPayload(message *chatpb.GetChatHistoryRequest, token *string) *chat.GetChatHistoryPayload {
	v := &chat.GetChatHistoryPayload{
		RoomID: message.RoomId,
	}
	if message.Limit != nil {
		limit := int(*message.Limit)
		v.Limit = &limit
	}
	if message.Offset != nil {
		offset := int(*message.Offset)
		v.Offset = &offset
	}
	v.Token = token
	return v
}

// NewProtoGetChatHistoryResponse builds the gRPC response type from the result
// of the "get_chat_history" endpoint of the "chat" service.
func NewProtoGetChatHistoryResponse(result *chat.GetChatHistoryResult) *chatpb.GetChatHistoryResponse {
	message := &chatpb.GetChatHistoryResponse{
		TotalCount: int32(result.TotalCount),
	}
	if result.Messages != nil {
		message.Messages = make([]*chatpb.ChatMessage, len(result.Messages))
		for i, val := range result.Messages {
			message.Messages[i] = &chatpb.ChatMessage{
				MessageId:   val.MessageID,
				UserId:      val.UserID,
				UserName:    val.UserName,
				Message_:    val.Message,
				MessageType: val.MessageType,
				Timestamp:   val.Timestamp,
			}
		}
	}
	return message
}
