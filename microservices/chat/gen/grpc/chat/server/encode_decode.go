// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC server encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package server

import (
	"context"
	"strings"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// EncodeSendMessageResponse encodes responses from the "chat" service
// "send_message" endpoint.
func EncodeSendMessageResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*chat.SendMessageResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "send_message", "*chat.SendMessageResult", v)
	}
	resp := NewProtoSendMessageResponse(result)
	return resp, nil
}

// DecodeSendMessageRequest decodes requests sent to "chat" service
// "send_message" endpoint.
func DecodeSendMessageRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *chatpb.SendMessageRequest
		ok      bool
	)
	{
		if message, ok = v.(*chatpb.SendMessageRequest); !ok {
			return nil, goagrpc.ErrInvalidType("chat", "send_message", "*chatpb.SendMessageRequest", v)
		}
	}
	var payload *chat.SendMessagePayload
	{
		payload = NewSendMessagePayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeJoinChatResponse encodes responses from the "chat" service "join_chat"
// endpoint.
func EncodeJoinChatResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*chat.JoinChatResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "join_chat", "*chat.JoinChatResult", v)
	}
	resp := NewProtoJoinChatResponse(result)
	return resp, nil
}

// DecodeJoinChatRequest decodes requests sent to "chat" service "join_chat"
// endpoint.
func DecodeJoinChatRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *chatpb.JoinChatRequest
		ok      bool
	)
	{
		if message, ok = v.(*chatpb.JoinChatRequest); !ok {
			return nil, goagrpc.ErrInvalidType("chat", "join_chat", "*chatpb.JoinChatRequest", v)
		}
	}
	var payload *chat.JoinChatPayload
	{
		payload = NewJoinChatPayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeGetChatHistoryResponse encodes responses from the "chat" service
// "get_chat_history" endpoint.
func EncodeGetChatHistoryResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*chat.GetChatHistoryResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chat", "get_chat_history", "*chat.GetChatHistoryResult", v)
	}
	resp := NewProtoGetChatHistoryResponse(result)
	return resp, nil
}

// DecodeGetChatHistoryRequest decodes requests sent to "chat" service
// "get_chat_history" endpoint.
func DecodeGetChatHistoryRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *chatpb.GetChatHistoryRequest
		ok      bool
	)
	{
		if message, ok = v.(*chatpb.GetChatHistoryRequest); !ok {
			return nil, goagrpc.ErrInvalidType("chat", "get_chat_history", "*chatpb.GetChatHistoryRequest", v)
		}
	}
	var payload *chat.GetChatHistoryPayload
	{
		payload = NewGetChatHistoryPayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}
