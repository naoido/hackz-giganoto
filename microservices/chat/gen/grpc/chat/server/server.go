// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC server
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package server

import (
	"context"
	"errors"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
	chat "object-t.com/hackz-giganoto/microservices/chat/gen/chat"
	chatpb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/chat/pb"
)

// Server implements the chatpb.ChatServer interface.
type Server struct {
	SendMessageH    goagrpc.UnaryHandler
	JoinChatH       goagrpc.StreamHandler
	GetChatHistoryH goagrpc.UnaryHandler
	chatpb.UnimplementedChatServer
}

// JoinChatServerStream implements the chat.JoinChatServerStream interface.
type JoinChatServerStream struct {
	stream chatpb.Chat_JoinChatServer
}

// New instantiates the server struct with the chat service endpoints.
func New(e *chat.Endpoints, uh goagrpc.UnaryHandler, sh goagrpc.StreamHandler) *Server {
	return &Server{
		SendMessageH:    NewSendMessageHandler(e.SendMessage, uh),
		JoinChatH:       NewJoinChatHandler(e.JoinChat, sh),
		GetChatHistoryH: NewGetChatHistoryHandler(e.GetChatHistory, uh),
	}
}

// NewSendMessageHandler creates a gRPC handler which serves the "chat" service
// "send_message" endpoint.
func NewSendMessageHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSendMessageRequest, EncodeSendMessageResponse)
	}
	return h
}

// SendMessage implements the "SendMessage" method in chatpb.ChatServer
// interface.
func (s *Server) SendMessage(ctx context.Context, message *chatpb.SendMessageRequest) (*chatpb.SendMessageResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "send_message")
	ctx = context.WithValue(ctx, goa.ServiceKey, "chat")
	resp, err := s.SendMessageH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "bad_request":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "internal_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*chatpb.SendMessageResponse), nil
}

// NewJoinChatHandler creates a gRPC handler which serves the "chat" service
// "join_chat" endpoint.
func NewJoinChatHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeJoinChatRequest)
	}
	return h
}

// JoinChat implements the "JoinChat" method in chatpb.ChatServer interface.
func (s *Server) JoinChat(message *chatpb.JoinChatRequest, stream chatpb.Chat_JoinChatServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "join_chat")
	ctx = context.WithValue(ctx, goa.ServiceKey, "chat")
	p, err := s.JoinChatH.Decode(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "bad_request":
				return goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "internal_error":
				return goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	ep := &chat.JoinChatEndpointInput{
		Stream:  &JoinChatServerStream{stream: stream},
		Payload: p.(*chat.JoinChatPayload),
	}
	err = s.JoinChatH.Handle(ctx, ep)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "bad_request":
				return goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "internal_error":
				return goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewGetChatHistoryHandler creates a gRPC handler which serves the "chat"
// service "get_chat_history" endpoint.
func NewGetChatHistoryHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetChatHistoryRequest, EncodeGetChatHistoryResponse)
	}
	return h
}

// GetChatHistory implements the "GetChatHistory" method in chatpb.ChatServer
// interface.
func (s *Server) GetChatHistory(ctx context.Context, message *chatpb.GetChatHistoryRequest) (*chatpb.GetChatHistoryResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "get_chat_history")
	ctx = context.WithValue(ctx, goa.ServiceKey, "chat")
	resp, err := s.GetChatHistoryH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "bad_request":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "internal_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*chatpb.GetChatHistoryResponse), nil
}

// Send streams instances of "chatpb.JoinChatResponse" to the "join_chat"
// endpoint gRPC stream.
func (s *JoinChatServerStream) Send(res *chat.JoinChatResult) error {
	v := NewProtoJoinChatResultJoinChatResponse(res)
	return s.stream.Send(v)
}

// SendWithContext streams instances of "chatpb.JoinChatResponse" to the
// "join_chat" endpoint gRPC stream with context.
func (s *JoinChatServerStream) SendWithContext(ctx context.Context, res *chat.JoinChatResult) error {
	return s.Send(res)
}

func (s *JoinChatServerStream) Close() error {
	// nothing to do here
	return nil
}
