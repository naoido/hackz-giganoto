// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile gRPC server encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package server

import (
	"context"
	"strings"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
	profilepb "object-t.com/hackz-giganoto/microservices/chat/gen/grpc/profile/pb"
	profile "object-t.com/hackz-giganoto/microservices/chat/gen/profile"
)

// EncodeGetProfileResponse encodes responses from the "profile" service
// "get_profile" endpoint.
func EncodeGetProfileResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*profile.GetProfileResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "get_profile", "*profile.GetProfileResult", v)
	}
	resp := NewProtoGetProfileResponse(result)
	return resp, nil
}

// DecodeGetProfileRequest decodes requests sent to "profile" service
// "get_profile" endpoint.
func DecodeGetProfileRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *profile.GetProfilePayload
	{
		payload = NewGetProfilePayload(token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeUpdateProfileResponse encodes responses from the "profile" service
// "update_profile" endpoint.
func EncodeUpdateProfileResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*profile.UpdateProfileResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "update_profile", "*profile.UpdateProfileResult", v)
	}
	resp := NewProtoUpdateProfileResponse(result)
	return resp, nil
}

// DecodeUpdateProfileRequest decodes requests sent to "profile" service
// "update_profile" endpoint.
func DecodeUpdateProfileRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *profilepb.UpdateProfileRequest
		ok      bool
	)
	{
		if message, ok = v.(*profilepb.UpdateProfileRequest); !ok {
			return nil, goagrpc.ErrInvalidType("profile", "update_profile", "*profilepb.UpdateProfileRequest", v)
		}
	}
	var payload *profile.UpdateProfilePayload
	{
		payload = NewUpdateProfilePayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}

// EncodeGetProfileByIDResponse encodes responses from the "profile" service
// "get_profile_by_id" endpoint.
func EncodeGetProfileByIDResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*profile.GetProfileByIDResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "get_profile_by_id", "*profile.GetProfileByIDResult", v)
	}
	resp := NewProtoGetProfileByIDResponse(result)
	return resp, nil
}

// DecodeGetProfileByIDRequest decodes requests sent to "profile" service
// "get_profile_by_id" endpoint.
func DecodeGetProfileByIDRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token *string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) > 0 {
			token = &vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var (
		message *profilepb.GetProfileByIDRequest
		ok      bool
	)
	{
		if message, ok = v.(*profilepb.GetProfileByIDRequest); !ok {
			return nil, goagrpc.ErrInvalidType("profile", "get_profile_by_id", "*profilepb.GetProfileByIDRequest", v)
		}
	}
	var payload *profile.GetProfileByIDPayload
	{
		payload = NewGetProfileByIDPayload(message, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}
	}
	return payload, nil
}
