// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package chat

import (
	"context"

	"goa.design/goa/v3/security"
)

// Bidirectional chat service
type Service interface {
	// Send a message to a chat room
	SendMessage(context.Context, *SendMessagePayload) (res *SendMessageResult, err error)
	// Join a chat room and receive messages
	JoinChat(context.Context, *JoinChatPayload, JoinChatServerStream) (err error)
	// Get chat history for a room
	GetChatHistory(context.Context, *GetChatHistoryPayload) (res *GetChatHistoryResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "profile"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "chat"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"send_message", "join_chat", "get_chat_history"}

// JoinChatServerStream is the interface a "join_chat" endpoint server stream
// must satisfy.
type JoinChatServerStream interface {
	// Send streams instances of "JoinChatResult".
	Send(*JoinChatResult) error
	// SendWithContext streams instances of "JoinChatResult" with context.
	SendWithContext(context.Context, *JoinChatResult) error
	// Close closes the stream.
	Close() error
}

// JoinChatClientStream is the interface a "join_chat" endpoint client stream
// must satisfy.
type JoinChatClientStream interface {
	// Recv reads instances of "JoinChatResult" from the stream.
	Recv() (*JoinChatResult, error)
	// RecvWithContext reads instances of "JoinChatResult" from the stream with
	// context.
	RecvWithContext(context.Context) (*JoinChatResult, error)
}

// Chat message
type ChatMessage struct {
	// Message ID
	MessageID string
	// Sender user ID
	UserID string
	// Sender user name
	UserName string
	// Message content
	Message string
	// Message type
	MessageType *string
	// Message timestamp
	Timestamp string
}

// GetChatHistoryPayload is the payload type of the chat service
// get_chat_history method.
type GetChatHistoryPayload struct {
	// JWT token
	Token *string
	// Chat room ID
	RoomID string
	// Number of messages to retrieve
	Limit *int
	// Offset for pagination
	Offset *int
}

// GetChatHistoryResult is the result type of the chat service get_chat_history
// method.
type GetChatHistoryResult struct {
	// Chat messages
	Messages []*ChatMessage
	// Total number of messages
	TotalCount int
}

// JoinChatPayload is the payload type of the chat service join_chat method.
type JoinChatPayload struct {
	// JWT token
	Token *string
	// Chat room ID
	RoomID string
}

// JoinChatResult is the result type of the chat service join_chat method.
type JoinChatResult struct {
	// Message ID
	MessageID string
	// Sender user ID
	UserID string
	// Sender user name
	UserName string
	// Message content
	Message string
	// Message type
	MessageType *string
	// Message timestamp
	Timestamp string
}

// SendMessagePayload is the payload type of the chat service send_message
// method.
type SendMessagePayload struct {
	// JWT token
	Token *string
	// Chat room ID
	RoomID string
	// Message content
	Message string
	// Message type (text, image, file)
	MessageType *string
}

// SendMessageResult is the result type of the chat service send_message method.
type SendMessageResult struct {
	// Message ID
	MessageID string
	// Message timestamp
	Timestamp string
}

// Invalid request
type BadRequest string

// Internal server error
type InternalError string

// Room not found
type NotFound string

// Unauthorized access
type Unauthorized string

// Error returns an error description.
func (e BadRequest) Error() string {
	return "Invalid request"
}

// ErrorName returns "bad_request".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e BadRequest) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "bad_request".
func (e BadRequest) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Room not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
