// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat endpoints
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package chat

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "chat" service endpoints.
type Endpoints struct {
	SendMessage    goa.Endpoint
	JoinChat       goa.Endpoint
	GetChatHistory goa.Endpoint
}

// JoinChatEndpointInput holds both the payload and the server stream of the
// "join_chat" method.
type JoinChatEndpointInput struct {
	// Payload is the method payload.
	Payload *JoinChatPayload
	// Stream is the server stream used by the "join_chat" method to send data.
	Stream JoinChatServerStream
}

// NewEndpoints wraps the methods of the "chat" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		SendMessage:    NewSendMessageEndpoint(s, a.JWTAuth),
		JoinChat:       NewJoinChatEndpoint(s, a.JWTAuth),
		GetChatHistory: NewGetChatHistoryEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "chat" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SendMessage = m(e.SendMessage)
	e.JoinChat = m(e.JoinChat)
	e.GetChatHistory = m(e.GetChatHistory)
}

// NewSendMessageEndpoint returns an endpoint function that calls the method
// "send_message" of service "chat".
func NewSendMessageEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SendMessagePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.SendMessage(ctx, p)
	}
}

// NewJoinChatEndpoint returns an endpoint function that calls the method
// "join_chat" of service "chat".
func NewJoinChatEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*JoinChatEndpointInput)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if ep.Payload.Token != nil {
			token = *ep.Payload.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.JoinChat(ctx, ep.Payload, ep.Stream)
	}
}

// NewGetChatHistoryEndpoint returns an endpoint function that calls the method
// "get_chat_history" of service "chat".
func NewGetChatHistoryEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetChatHistoryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetChatHistory(ctx, p)
	}
}
