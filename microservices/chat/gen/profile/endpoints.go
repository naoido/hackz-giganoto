// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile endpoints
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package profile

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "profile" service endpoints.
type Endpoints struct {
	GetProfile     goa.Endpoint
	UpdateProfile  goa.Endpoint
	GetProfileByID goa.Endpoint
}

// NewEndpoints wraps the methods of the "profile" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetProfile:     NewGetProfileEndpoint(s, a.JWTAuth),
		UpdateProfile:  NewUpdateProfileEndpoint(s, a.JWTAuth),
		GetProfileByID: NewGetProfileByIDEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "profile" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetProfile = m(e.GetProfile)
	e.UpdateProfile = m(e.UpdateProfile)
	e.GetProfileByID = m(e.GetProfileByID)
}

// NewGetProfileEndpoint returns an endpoint function that calls the method
// "get_profile" of service "profile".
func NewGetProfileEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetProfilePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetProfile(ctx, p)
	}
}

// NewUpdateProfileEndpoint returns an endpoint function that calls the method
// "update_profile" of service "profile".
func NewUpdateProfileEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateProfilePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateProfile(ctx, p)
	}
}

// NewGetProfileByIDEndpoint returns an endpoint function that calls the method
// "get_profile_by_id" of service "profile".
func NewGetProfileByIDEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetProfileByIDPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetProfileByID(ctx, p)
	}
}
