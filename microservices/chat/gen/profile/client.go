// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile client
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/chat/design

package profile

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "profile" service client.
type Client struct {
	GetProfileEndpoint     goa.Endpoint
	UpdateProfileEndpoint  goa.Endpoint
	GetProfileByIDEndpoint goa.Endpoint
}

// NewClient initializes a "profile" service client given the endpoints.
func NewClient(getProfile, updateProfile, getProfileByID goa.Endpoint) *Client {
	return &Client{
		GetProfileEndpoint:     getProfile,
		UpdateProfileEndpoint:  updateProfile,
		GetProfileByIDEndpoint: getProfileByID,
	}
}

// GetProfile calls the "get_profile" endpoint of the "profile" service.
// GetProfile may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetProfile(ctx context.Context, p *GetProfilePayload) (res *GetProfileResult, err error) {
	var ires any
	ires, err = c.GetProfileEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetProfileResult), nil
}

// UpdateProfile calls the "update_profile" endpoint of the "profile" service.
// UpdateProfile may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "bad_request" (type BadRequest)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) UpdateProfile(ctx context.Context, p *UpdateProfilePayload) (res *UpdateProfileResult, err error) {
	var ires any
	ires, err = c.UpdateProfileEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateProfileResult), nil
}

// GetProfileByID calls the "get_profile_by_id" endpoint of the "profile"
// service.
// GetProfileByID may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetProfileByID(ctx context.Context, p *GetProfileByIDPayload) (res *GetProfileByIDResult, err error) {
	var ires any
	ires, err = c.GetProfileByIDEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*GetProfileByIDResult), nil
}
