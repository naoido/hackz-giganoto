// Code generated by goa v3.21.1, DO NOT EDIT.
//
// bff endpoints
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/bff/design

package bff

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "bff" service endpoints.
type Endpoints struct {
	CreateRoom    goa.Endpoint
	History       goa.Endpoint
	RoomList      goa.Endpoint
	JoinRoom      goa.Endpoint
	InviteRoom    goa.Endpoint
	StreamChat    goa.Endpoint
	GetProfile    goa.Endpoint
	UpdateProfile goa.Endpoint
}

// StreamChatEndpointInput holds both the payload and the server stream of the
// "stream_chat" method.
type StreamChatEndpointInput struct {
	// Payload is the method payload.
	Payload *StreamChatPayload
	// Stream is the server stream used by the "stream_chat" method to send data.
	Stream StreamChatServerStream
}

// NewEndpoints wraps the methods of the "bff" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateRoom:    NewCreateRoomEndpoint(s, a.JWTAuth),
		History:       NewHistoryEndpoint(s, a.JWTAuth),
		RoomList:      NewRoomListEndpoint(s, a.JWTAuth),
		JoinRoom:      NewJoinRoomEndpoint(s, a.JWTAuth),
		InviteRoom:    NewInviteRoomEndpoint(s, a.JWTAuth),
		StreamChat:    NewStreamChatEndpoint(s, a.JWTAuth),
		GetProfile:    NewGetProfileEndpoint(s, a.JWTAuth),
		UpdateProfile: NewUpdateProfileEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "bff" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateRoom = m(e.CreateRoom)
	e.History = m(e.History)
	e.RoomList = m(e.RoomList)
	e.JoinRoom = m(e.JoinRoom)
	e.InviteRoom = m(e.InviteRoom)
	e.StreamChat = m(e.StreamChat)
	e.GetProfile = m(e.GetProfile)
	e.UpdateProfile = m(e.UpdateProfile)
}

// NewCreateRoomEndpoint returns an endpoint function that calls the method
// "create_room" of service "bff".
func NewCreateRoomEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateRoomPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateRoom(ctx, p)
	}
}

// NewHistoryEndpoint returns an endpoint function that calls the method
// "history" of service "bff".
func NewHistoryEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*HistoryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.History(ctx, p)
	}
}

// NewRoomListEndpoint returns an endpoint function that calls the method
// "room-list" of service "bff".
func NewRoomListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RoomListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.RoomList(ctx, p)
	}
}

// NewJoinRoomEndpoint returns an endpoint function that calls the method
// "join-room" of service "bff".
func NewJoinRoomEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*JoinRoomPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.JoinRoom(ctx, p)
	}
}

// NewInviteRoomEndpoint returns an endpoint function that calls the method
// "invite-room" of service "bff".
func NewInviteRoomEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*InviteRoomPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.InviteRoom(ctx, p)
	}
}

// NewStreamChatEndpoint returns an endpoint function that calls the method
// "stream_chat" of service "bff".
func NewStreamChatEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*StreamChatEndpointInput)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, ep.Payload.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.StreamChat(ctx, ep.Payload, ep.Stream)
	}
}

// NewGetProfileEndpoint returns an endpoint function that calls the method
// "get_profile" of service "bff".
func NewGetProfileEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetProfilePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetProfile(ctx, p)
	}
}

// NewUpdateProfileEndpoint returns an endpoint function that calls the method
// "update_profile" of service "bff".
func NewUpdateProfileEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateProfilePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:write"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateProfile(ctx, p)
	}
}
