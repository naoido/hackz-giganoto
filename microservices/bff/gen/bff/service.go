// Code generated by goa v3.21.1, DO NOT EDIT.
//
// bff service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/bff/design

package bff

import (
	"context"

	"goa.design/goa/v3/security"
)

// Backend for Frontend service for chat application
type Service interface {
	// Create a new chat room
	CreateRoom(context.Context, *CreateRoomPayload) (res string, err error)
	// Get chat room history with enriched user names
	History(context.Context, *HistoryPayload) (res []*EnrichedMessage, err error)
	// Get all chat rooms history
	RoomList(context.Context, *RoomListPayload) (res []string, err error)
	// Creates a new chat room
	JoinRoom(context.Context, *JoinRoomPayload) (res string, err error)
	// Creates a new chat room
	InviteRoom(context.Context, *InviteRoomPayload) (res string, err error)
	// Stream chat messages with bidirectional communication
	StreamChat(context.Context, *StreamChatPayload, StreamChatServerStream) (err error)
	// Get current user profile
	GetProfile(context.Context, *GetProfilePayload) (res *GetProfileResult, err error)
	// Update current user profile
	UpdateProfile(context.Context, *UpdateProfilePayload) (res *UpdateProfileResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "bff"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "bff"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"create_room", "history", "room-list", "join-room", "invite-room", "stream_chat", "get_profile", "update_profile"}

// StreamChatServerStream is the interface a "stream_chat" endpoint server
// stream must satisfy.
type StreamChatServerStream interface {
	// Send streams instances of "EnrichedMessage".
	Send(*EnrichedMessage) error
	// SendWithContext streams instances of "EnrichedMessage" with context.
	SendWithContext(context.Context, *EnrichedMessage) error
	// Recv reads instances of "string" from the stream.
	Recv() (string, error)
	// RecvWithContext reads instances of "string" from the stream with context.
	RecvWithContext(context.Context) (string, error)
	// Close closes the stream.
	Close() error
}

// StreamChatClientStream is the interface a "stream_chat" endpoint client
// stream must satisfy.
type StreamChatClientStream interface {
	// Send streams instances of "string".
	Send(string) error
	// SendWithContext streams instances of "string" with context.
	SendWithContext(context.Context, string) error
	// Recv reads instances of "EnrichedMessage" from the stream.
	Recv() (*EnrichedMessage, error)
	// RecvWithContext reads instances of "EnrichedMessage" from the stream with
	// context.
	RecvWithContext(context.Context) (*EnrichedMessage, error)
	// Close closes the stream.
	Close() error
}

// CreateRoomPayload is the payload type of the bff service create_room method.
type CreateRoomPayload struct {
	// JWT token
	Token string
}

// EnrichedMessage is the result type of the bff service stream_chat method.
type EnrichedMessage struct {
	// Message ID
	MessageID *string
	// Room ID
	RoomID string
	// Sender user ID
	UserID string
	// Message content
	Message string
	// Sent timestamp
	CreatedAt *int64
	// Created timestamp
	UpdatedAt *int64
}

// GetProfilePayload is the payload type of the bff service get_profile method.
type GetProfilePayload struct {
	// JWT token
	Token *string
}

// GetProfileResult is the result type of the bff service get_profile method.
type GetProfileResult struct {
	// User ID
	UserID string
	// User name
	Name string
	// Creation timestamp
	CreatedAt *string
	// Last update timestamp
	UpdatedAt *string
}

// HistoryPayload is the payload type of the bff service history method.
type HistoryPayload struct {
	// JWT token
	Token string
	// Room ID
	RoomID string
}

// InviteRoomPayload is the payload type of the bff service invite-room method.
type InviteRoomPayload struct {
	// The access token
	Token string
	// The id of the room
	RoomID string
	// The id of the user
	UserID string
}

// JoinRoomPayload is the payload type of the bff service join-room method.
type JoinRoomPayload struct {
	// The access token
	Token string
	// Invite key
	InviteKey string
}

// RoomListPayload is the payload type of the bff service room-list method.
type RoomListPayload struct {
	// The access token
	Token string
}

// StreamChatPayload is the payload type of the bff service stream_chat method.
type StreamChatPayload struct {
	// JWT token
	Token string
	// Room ID
	RoomID string
}

// UpdateProfilePayload is the payload type of the bff service update_profile
// method.
type UpdateProfilePayload struct {
	// JWT token
	Token *string
	// User name
	Name string
}

// UpdateProfileResult is the result type of the bff service update_profile
// method.
type UpdateProfileResult struct {
	// User ID
	UserID string
	// User name
	Name string
	// Creation timestamp
	CreatedAt *string
	// Last update timestamp
	UpdatedAt *string
}

// Invalid request
type BadRequest string

// Internal server error
type InternalError string

type InvalidArgument string

// Profile not found
type NotFound string

type Notfound string

// Permission denied
type PermissionDenied string

// Unauthorized access
type Unauthorized string

// Error returns an error description.
func (e BadRequest) Error() string {
	return "Invalid request"
}

// ErrorName returns "bad_request".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e BadRequest) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "bad_request".
func (e BadRequest) GoaErrorName() string {
	return "bad_request"
}

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e InvalidArgument) Error() string {
	return ""
}

// ErrorName returns "invalid_argument".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidArgument) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_argument".
func (e InvalidArgument) GoaErrorName() string {
	return "invalid_argument"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Profile not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e Notfound) Error() string {
	return ""
}

// ErrorName returns "notfound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Notfound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "notfound".
func (e Notfound) GoaErrorName() string {
	return "notfound"
}

// Error returns an error description.
func (e PermissionDenied) Error() string {
	return "Permission denied"
}

// ErrorName returns "permission-denied".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e PermissionDenied) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "permission-denied".
func (e PermissionDenied) GoaErrorName() string {
	return "permission-denied"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
