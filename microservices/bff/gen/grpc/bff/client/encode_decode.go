// Code generated by goa v3.21.1, DO NOT EDIT.
//
// bff gRPC client encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/bff/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	bff "object-t.com/hackz-giganoto/microservices/bff/gen/bff"
	bffpb "object-t.com/hackz-giganoto/microservices/bff/gen/grpc/bff/pb"
)

// BuildCreateRoomFunc builds the remote method to invoke for "bff" service
// "create_room" endpoint.
func BuildCreateRoomFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CreateRoom(ctx, reqpb.(*bffpb.CreateRoomRequest), opts...)
		}
		return grpccli.CreateRoom(ctx, &bffpb.CreateRoomRequest{}, opts...)
	}
}

// EncodeCreateRoomRequest encodes requests sent to bff create_room endpoint.
func EncodeCreateRoomRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.CreateRoomPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "create_room", "*bff.CreateRoomPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoCreateRoomRequest(), nil
}

// DecodeCreateRoomResponse decodes responses from the bff create_room endpoint.
func DecodeCreateRoomResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.CreateRoomResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "create_room", "*bffpb.CreateRoomResponse", v)
	}
	res := NewCreateRoomResult(message)
	return res, nil
}

// BuildHistoryFunc builds the remote method to invoke for "bff" service
// "history" endpoint.
func BuildHistoryFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.History(ctx, reqpb.(*bffpb.HistoryRequest), opts...)
		}
		return grpccli.History(ctx, &bffpb.HistoryRequest{}, opts...)
	}
}

// EncodeHistoryRequest encodes requests sent to bff history endpoint.
func EncodeHistoryRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.HistoryPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "history", "*bff.HistoryPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoHistoryRequest(payload), nil
}

// DecodeHistoryResponse decodes responses from the bff history endpoint.
func DecodeHistoryResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.HistoryResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "history", "*bffpb.HistoryResponse", v)
	}
	res := NewHistoryResult(message)
	return res, nil
}

// BuildRoomListFunc builds the remote method to invoke for "bff" service
// "room-list" endpoint.
func BuildRoomListFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.RoomList(ctx, reqpb.(*bffpb.RoomListRequest), opts...)
		}
		return grpccli.RoomList(ctx, &bffpb.RoomListRequest{}, opts...)
	}
}

// EncodeRoomListRequest encodes requests sent to bff room-list endpoint.
func EncodeRoomListRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.RoomListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "room-list", "*bff.RoomListPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoRoomListRequest(), nil
}

// DecodeRoomListResponse decodes responses from the bff room-list endpoint.
func DecodeRoomListResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.RoomListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "room-list", "*bffpb.RoomListResponse", v)
	}
	res := NewRoomListResult(message)
	return res, nil
}

// BuildJoinRoomFunc builds the remote method to invoke for "bff" service
// "join-room" endpoint.
func BuildJoinRoomFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.JoinRoom(ctx, reqpb.(*bffpb.JoinRoomRequest), opts...)
		}
		return grpccli.JoinRoom(ctx, &bffpb.JoinRoomRequest{}, opts...)
	}
}

// EncodeJoinRoomRequest encodes requests sent to bff join-room endpoint.
func EncodeJoinRoomRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.JoinRoomPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "join-room", "*bff.JoinRoomPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoJoinRoomRequest(payload), nil
}

// DecodeJoinRoomResponse decodes responses from the bff join-room endpoint.
func DecodeJoinRoomResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.JoinRoomResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "join-room", "*bffpb.JoinRoomResponse", v)
	}
	res := NewJoinRoomResult(message)
	return res, nil
}

// BuildInviteRoomFunc builds the remote method to invoke for "bff" service
// "invite-room" endpoint.
func BuildInviteRoomFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.InviteRoom(ctx, reqpb.(*bffpb.InviteRoomRequest), opts...)
		}
		return grpccli.InviteRoom(ctx, &bffpb.InviteRoomRequest{}, opts...)
	}
}

// EncodeInviteRoomRequest encodes requests sent to bff invite-room endpoint.
func EncodeInviteRoomRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.InviteRoomPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "invite-room", "*bff.InviteRoomPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoInviteRoomRequest(payload), nil
}

// DecodeInviteRoomResponse decodes responses from the bff invite-room endpoint.
func DecodeInviteRoomResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.InviteRoomResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "invite-room", "*bffpb.InviteRoomResponse", v)
	}
	res := NewInviteRoomResult(message)
	return res, nil
}

// BuildStreamChatFunc builds the remote method to invoke for "bff" service
// "stream_chat" endpoint.
func BuildStreamChatFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.StreamChat(ctx, opts...)
		}
		return grpccli.StreamChat(ctx, opts...)
	}
}

// EncodeStreamChatRequest encodes requests sent to bff stream_chat endpoint.
func EncodeStreamChatRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.StreamChatPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "stream_chat", "*bff.StreamChatPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	(*md).Append("room_id", payload.RoomID)
	return nil, nil
}

// DecodeStreamChatResponse decodes responses from the bff stream_chat endpoint.
func DecodeStreamChatResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &StreamChatClientStream{
		stream: v.(bffpb.Bff_StreamChatClient),
	}, nil
}

// BuildGetProfileFunc builds the remote method to invoke for "bff" service
// "get_profile" endpoint.
func BuildGetProfileFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetProfile(ctx, reqpb.(*bffpb.GetProfileRequest), opts...)
		}
		return grpccli.GetProfile(ctx, &bffpb.GetProfileRequest{}, opts...)
	}
}

// EncodeGetProfileRequest encodes requests sent to bff get_profile endpoint.
func EncodeGetProfileRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.GetProfilePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "get_profile", "*bff.GetProfilePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoGetProfileRequest(), nil
}

// DecodeGetProfileResponse decodes responses from the bff get_profile endpoint.
func DecodeGetProfileResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.GetProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "get_profile", "*bffpb.GetProfileResponse", v)
	}
	res := NewGetProfileResult(message)
	return res, nil
}

// BuildUpdateProfileFunc builds the remote method to invoke for "bff" service
// "update_profile" endpoint.
func BuildUpdateProfileFunc(grpccli bffpb.BffClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.UpdateProfile(ctx, reqpb.(*bffpb.UpdateProfileRequest), opts...)
		}
		return grpccli.UpdateProfile(ctx, &bffpb.UpdateProfileRequest{}, opts...)
	}
}

// EncodeUpdateProfileRequest encodes requests sent to bff update_profile
// endpoint.
func EncodeUpdateProfileRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*bff.UpdateProfilePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "update_profile", "*bff.UpdateProfilePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoUpdateProfileRequest(payload), nil
}

// DecodeUpdateProfileResponse decodes responses from the bff update_profile
// endpoint.
func DecodeUpdateProfileResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*bffpb.UpdateProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("bff", "update_profile", "*bffpb.UpdateProfileResponse", v)
	}
	res := NewUpdateProfileResult(message)
	return res, nil
}
