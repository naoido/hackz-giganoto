// Code generated by goa v3.21.1, DO NOT EDIT.
//
// bff gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/bff/design

package client

import (
	"encoding/json"
	"fmt"

	bff "object-t.com/hackz-giganoto/microservices/bff/gen/bff"
	bffpb "object-t.com/hackz-giganoto/microservices/bff/gen/grpc/bff/pb"
)

// BuildCreateRoomPayload builds the payload for the bff create_room endpoint
// from CLI flags.
func BuildCreateRoomPayload(bffCreateRoomToken string) (*bff.CreateRoomPayload, error) {
	var token string
	{
		token = bffCreateRoomToken
	}
	v := &bff.CreateRoomPayload{}
	v.Token = token

	return v, nil
}

// BuildHistoryPayload builds the payload for the bff history endpoint from CLI
// flags.
func BuildHistoryPayload(bffHistoryMessage string, bffHistoryToken string) (*bff.HistoryPayload, error) {
	var err error
	var message bffpb.HistoryRequest
	{
		if bffHistoryMessage != "" {
			err = json.Unmarshal([]byte(bffHistoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"room_id\": \"Est sunt.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = bffHistoryToken
	}
	v := &bff.HistoryPayload{
		RoomID: message.RoomId,
	}
	v.Token = token

	return v, nil
}

// BuildRoomListPayload builds the payload for the bff room-list endpoint from
// CLI flags.
func BuildRoomListPayload(bffRoomListToken string) (*bff.RoomListPayload, error) {
	var token string
	{
		token = bffRoomListToken
	}
	v := &bff.RoomListPayload{}
	v.Token = token

	return v, nil
}

// BuildJoinRoomPayload builds the payload for the bff join-room endpoint from
// CLI flags.
func BuildJoinRoomPayload(bffJoinRoomMessage string, bffJoinRoomToken string) (*bff.JoinRoomPayload, error) {
	var err error
	var message bffpb.JoinRoomRequest
	{
		if bffJoinRoomMessage != "" {
			err = json.Unmarshal([]byte(bffJoinRoomMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"invite_key\": \"Sed dolorem.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = bffJoinRoomToken
	}
	v := &bff.JoinRoomPayload{
		InviteKey: message.InviteKey,
	}
	v.Token = token

	return v, nil
}

// BuildInviteRoomPayload builds the payload for the bff invite-room endpoint
// from CLI flags.
func BuildInviteRoomPayload(bffInviteRoomMessage string, bffInviteRoomToken string) (*bff.InviteRoomPayload, error) {
	var err error
	var message bffpb.InviteRoomRequest
	{
		if bffInviteRoomMessage != "" {
			err = json.Unmarshal([]byte(bffInviteRoomMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"room_id\": \"Quo facilis quas voluptatum.\",\n      \"user_id\": \"Omnis voluptatum expedita.\"\n   }'")
			}
		}
	}
	var token string
	{
		token = bffInviteRoomToken
	}
	v := &bff.InviteRoomPayload{
		RoomID: message.RoomId,
		UserID: message.UserId,
	}
	v.Token = token

	return v, nil
}

// BuildStreamChatPayload builds the payload for the bff stream_chat endpoint
// from CLI flags.
func BuildStreamChatPayload(bffStreamChatToken string, bffStreamChatRoomID string) (*bff.StreamChatPayload, error) {
	var token string
	{
		token = bffStreamChatToken
	}
	var roomID string
	{
		roomID = bffStreamChatRoomID
	}
	v := &bff.StreamChatPayload{}
	v.Token = token
	v.RoomID = roomID

	return v, nil
}

// BuildGetProfilePayload builds the payload for the bff get_profile endpoint
// from CLI flags.
func BuildGetProfilePayload(bffGetProfileToken string) (*bff.GetProfilePayload, error) {
	var token *string
	{
		if bffGetProfileToken != "" {
			token = &bffGetProfileToken
		}
	}
	v := &bff.GetProfilePayload{}
	v.Token = token

	return v, nil
}

// BuildUpdateProfilePayload builds the payload for the bff update_profile
// endpoint from CLI flags.
func BuildUpdateProfilePayload(bffUpdateProfileMessage string, bffUpdateProfileToken string) (*bff.UpdateProfilePayload, error) {
	var err error
	var message bffpb.UpdateProfileRequest
	{
		if bffUpdateProfileMessage != "" {
			err = json.Unmarshal([]byte(bffUpdateProfileMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Labore ipsum ut dolor atque impedit quis.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if bffUpdateProfileToken != "" {
			token = &bffUpdateProfileToken
		}
	}
	v := &bff.UpdateProfilePayload{
		Name: message.Name,
	}
	v.Token = token

	return v, nil
}
