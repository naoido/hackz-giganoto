// Code generated by goa v3.21.1, DO NOT EDIT.
//
// bff gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/bff/design

package server

import (
	bff "object-t.com/hackz-giganoto/microservices/bff/gen/bff"
	bffpb "object-t.com/hackz-giganoto/microservices/bff/gen/grpc/bff/pb"
)

// NewCreateRoomPayload builds the payload of the "create_room" endpoint of the
// "bff" service from the gRPC request type.
func NewCreateRoomPayload(token string) *bff.CreateRoomPayload {
	v := &bff.CreateRoomPayload{}
	v.Token = token
	return v
}

// NewProtoCreateRoomResponse builds the gRPC response type from the result of
// the "create_room" endpoint of the "bff" service.
func NewProtoCreateRoomResponse(result string) *bffpb.CreateRoomResponse {
	message := &bffpb.CreateRoomResponse{}
	message.Field = result
	return message
}

// NewHistoryPayload builds the payload of the "history" endpoint of the "bff"
// service from the gRPC request type.
func NewHistoryPayload(message *bffpb.HistoryRequest, token string) *bff.HistoryPayload {
	v := &bff.HistoryPayload{
		RoomID: message.RoomId,
	}
	v.Token = token
	return v
}

// NewProtoHistoryResponse builds the gRPC response type from the result of the
// "history" endpoint of the "bff" service.
func NewProtoHistoryResponse(result []*bff.EnrichedMessage) *bffpb.HistoryResponse {
	message := &bffpb.HistoryResponse{}
	message.Field = make([]*bffpb.EnrichedMessage, len(result))
	for i, val := range result {
		message.Field[i] = &bffpb.EnrichedMessage{
			MessageId: val.MessageID,
			RoomId:    val.RoomID,
			UserId:    val.UserID,
			Message_:  val.Message,
			CreatedAt: val.CreatedAt,
			UpdatedAt: val.UpdatedAt,
		}
	}
	return message
}

// NewRoomListPayload builds the payload of the "room-list" endpoint of the
// "bff" service from the gRPC request type.
func NewRoomListPayload(token string) *bff.RoomListPayload {
	v := &bff.RoomListPayload{}
	v.Token = token
	return v
}

// NewProtoRoomListResponse builds the gRPC response type from the result of
// the "room-list" endpoint of the "bff" service.
func NewProtoRoomListResponse(result []string) *bffpb.RoomListResponse {
	message := &bffpb.RoomListResponse{}
	message.Field = make([]string, len(result))
	for i, val := range result {
		message.Field[i] = val
	}
	return message
}

// NewJoinRoomPayload builds the payload of the "join-room" endpoint of the
// "bff" service from the gRPC request type.
func NewJoinRoomPayload(message *bffpb.JoinRoomRequest, token string) *bff.JoinRoomPayload {
	v := &bff.JoinRoomPayload{
		InviteKey: message.InviteKey,
	}
	v.Token = token
	return v
}

// NewProtoJoinRoomResponse builds the gRPC response type from the result of
// the "join-room" endpoint of the "bff" service.
func NewProtoJoinRoomResponse(result string) *bffpb.JoinRoomResponse {
	message := &bffpb.JoinRoomResponse{}
	message.Field = result
	return message
}

// NewInviteRoomPayload builds the payload of the "invite-room" endpoint of the
// "bff" service from the gRPC request type.
func NewInviteRoomPayload(message *bffpb.InviteRoomRequest, token string) *bff.InviteRoomPayload {
	v := &bff.InviteRoomPayload{
		RoomID: message.RoomId,
		UserID: message.UserId,
	}
	v.Token = token
	return v
}

// NewProtoInviteRoomResponse builds the gRPC response type from the result of
// the "invite-room" endpoint of the "bff" service.
func NewProtoInviteRoomResponse(result string) *bffpb.InviteRoomResponse {
	message := &bffpb.InviteRoomResponse{}
	message.Field = result
	return message
}

// NewStreamChatPayload builds the payload of the "stream_chat" endpoint of the
// "bff" service from the gRPC request type.
func NewStreamChatPayload(token string, roomID string) *bff.StreamChatPayload {
	v := &bff.StreamChatPayload{}
	v.Token = token
	v.RoomID = roomID
	return v
}

// NewProtoStreamChatResponse builds the gRPC response type from the result of
// the "stream_chat" endpoint of the "bff" service.
func NewProtoStreamChatResponse(result *bff.EnrichedMessage) *bffpb.StreamChatResponse {
	message := &bffpb.StreamChatResponse{
		MessageId: result.MessageID,
		RoomId:    result.RoomID,
		UserId:    result.UserID,
		Message_:  result.Message,
		CreatedAt: result.CreatedAt,
		UpdatedAt: result.UpdatedAt,
	}
	return message
}

func NewProtoEnrichedMessageStreamChatResponse(result *bff.EnrichedMessage) *bffpb.StreamChatResponse {
	v := &bffpb.StreamChatResponse{
		MessageId: result.MessageID,
		RoomId:    result.RoomID,
		UserId:    result.UserID,
		Message_:  result.Message,
		CreatedAt: result.CreatedAt,
		UpdatedAt: result.UpdatedAt,
	}
	return v
}

func NewStreamChatStreamingRequestStreamChatStreamingRequest(v *bffpb.StreamChatStreamingRequest) string {
	spayload := v.Field
	return spayload
}

// NewGetProfilePayload builds the payload of the "get_profile" endpoint of the
// "bff" service from the gRPC request type.
func NewGetProfilePayload(token *string) *bff.GetProfilePayload {
	v := &bff.GetProfilePayload{}
	v.Token = token
	return v
}

// NewProtoGetProfileResponse builds the gRPC response type from the result of
// the "get_profile" endpoint of the "bff" service.
func NewProtoGetProfileResponse(result *bff.GetProfileResult) *bffpb.GetProfileResponse {
	message := &bffpb.GetProfileResponse{
		UserId:    result.UserID,
		Name:      result.Name,
		CreatedAt: result.CreatedAt,
		UpdatedAt: result.UpdatedAt,
	}
	return message
}

// NewUpdateProfilePayload builds the payload of the "update_profile" endpoint
// of the "bff" service from the gRPC request type.
func NewUpdateProfilePayload(message *bffpb.UpdateProfileRequest, token *string) *bff.UpdateProfilePayload {
	v := &bff.UpdateProfilePayload{
		Name: message.Name,
	}
	v.Token = token
	return v
}

// NewProtoUpdateProfileResponse builds the gRPC response type from the result
// of the "update_profile" endpoint of the "bff" service.
func NewProtoUpdateProfileResponse(result *bff.UpdateProfileResult) *bffpb.UpdateProfileResponse {
	message := &bffpb.UpdateProfileResponse{
		UserId:    result.UserID,
		Name:      result.Name,
		CreatedAt: result.CreatedAt,
		UpdatedAt: result.UpdatedAt,
	}
	return message
}
