// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/auth/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	auth "object-t.com/hackz-giganoto/microservices/auth/gen/auth"
)

// EncodeIntrospectResponse returns an encoder for responses returned by the
// auth introspect endpoint.
func EncodeIntrospectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.IntrospectResult)
		enc := encoder(ctx, w)
		body := NewIntrospectResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIntrospectRequest returns a decoder for requests sent to the auth
// introspect endpoint.
func DecodeIntrospectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body IntrospectRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateIntrospectRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewIntrospectPayload(&body)

		return payload, nil
	}
}

// EncodeIntrospectError returns an encoder for errors returned by the
// introspect auth endpoint.
func EncodeIntrospectError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "internal_error":
			var res auth.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "invalid_token":
			var res auth.InvalidToken
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAuthURLResponse returns an encoder for responses returned by the auth
// auth_url endpoint.
func EncodeAuthURLResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.AuthURLResult)
		enc := encoder(ctx, w)
		body := NewAuthURLResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAuthURLError returns an encoder for errors returned by the auth_url
// auth endpoint.
func EncodeAuthURLError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "internal_error":
			var res auth.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeOauthCallbackResponse returns an encoder for responses returned by the
// auth oauth_callback endpoint.
func EncodeOauthCallbackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.OauthCallbackResult)
		enc := encoder(ctx, w)
		body := NewOauthCallbackResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeOauthCallbackRequest returns a decoder for requests sent to the auth
// oauth_callback endpoint.
func DecodeOauthCallbackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			code  string
			state string
			err   error
		)
		qp := r.URL.Query()
		code = qp.Get("code")
		if code == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "query string"))
		}
		state = qp.Get("state")
		if state == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("state", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewOauthCallbackPayload(code, state)

		return payload, nil
	}
}

// EncodeOauthCallbackError returns an encoder for errors returned by the
// oauth_callback auth endpoint.
func EncodeOauthCallbackError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "github_error":
			var res auth.GithubError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadGateway)
			return enc.Encode(body)
		case "internal_error":
			var res auth.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "invalid_code":
			var res auth.InvalidCode
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_state":
			var res auth.InvalidState
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
