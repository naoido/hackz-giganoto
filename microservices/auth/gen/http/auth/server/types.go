// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/auth/design

package server

import (
	goa "goa.design/goa/v3/pkg"
	auth "object-t.com/hackz-giganoto/microservices/auth/gen/auth"
)

// IntrospectRequestBody is the type of the "auth" service "introspect"
// endpoint HTTP request body.
type IntrospectRequestBody struct {
	// Opaque token to introspect
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// IntrospectResponseBody is the type of the "auth" service "introspect"
// endpoint HTTP response body.
type IntrospectResponseBody struct {
	// Internal JWT token for downstream services
	JWT string `form:"jwt" json:"jwt" xml:"jwt"`
}

// AuthURLResponseBody is the type of the "auth" service "auth_url" endpoint
// HTTP response body.
type AuthURLResponseBody struct {
	// GitHub OAuth authorization URL
	AuthURL string `form:"auth_url" json:"auth_url" xml:"auth_url"`
	// OAuth state parameter for CSRF protection
	State string `form:"state" json:"state" xml:"state"`
}

// OauthCallbackResponseBody is the type of the "auth" service "oauth_callback"
// endpoint HTTP response body.
type OauthCallbackResponseBody struct {
	// Opaque access token
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// Token type (Bearer)
	TokenType string `form:"token_type" json:"token_type" xml:"token_type"`
	// Token expiration in seconds
	ExpiresIn int64 `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// GitHub user ID
	UserID string `form:"user_id" json:"user_id" xml:"user_id"`
	// GitHub user name
	UserName *string `form:"userName,omitempty" json:"userName,omitempty" xml:"userName,omitempty"`
}

// NewIntrospectResponseBody builds the HTTP response body from the result of
// the "introspect" endpoint of the "auth" service.
func NewIntrospectResponseBody(res *auth.IntrospectResult) *IntrospectResponseBody {
	body := &IntrospectResponseBody{
		JWT: res.JWT,
	}
	return body
}

// NewAuthURLResponseBody builds the HTTP response body from the result of the
// "auth_url" endpoint of the "auth" service.
func NewAuthURLResponseBody(res *auth.AuthURLResult) *AuthURLResponseBody {
	body := &AuthURLResponseBody{
		AuthURL: res.AuthURL,
		State:   res.State,
	}
	return body
}

// NewOauthCallbackResponseBody builds the HTTP response body from the result
// of the "oauth_callback" endpoint of the "auth" service.
func NewOauthCallbackResponseBody(res *auth.OauthCallbackResult) *OauthCallbackResponseBody {
	body := &OauthCallbackResponseBody{
		AccessToken: res.AccessToken,
		TokenType:   res.TokenType,
		ExpiresIn:   res.ExpiresIn,
		UserID:      res.UserID,
		UserName:    res.UserName,
	}
	return body
}

// NewIntrospectPayload builds a auth service introspect endpoint payload.
func NewIntrospectPayload(body *IntrospectRequestBody) *auth.IntrospectPayload {
	v := &auth.IntrospectPayload{
		Token: *body.Token,
	}

	return v
}

// NewOauthCallbackPayload builds a auth service oauth_callback endpoint
// payload.
func NewOauthCallbackPayload(code string, state string) *auth.OauthCallbackPayload {
	v := &auth.OauthCallbackPayload{}
	v.Code = code
	v.State = state

	return v
}

// ValidateIntrospectRequestBody runs the validations defined on
// IntrospectRequestBody
func ValidateIntrospectRequestBody(body *IntrospectRequestBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}
