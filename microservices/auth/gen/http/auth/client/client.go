// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/auth/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// Introspect Doer is the HTTP client used to make requests to the introspect
	// endpoint.
	IntrospectDoer goahttp.Doer

	// AuthURL Doer is the HTTP client used to make requests to the auth_url
	// endpoint.
	AuthURLDoer goahttp.Doer

	// OauthCallback Doer is the HTTP client used to make requests to the
	// oauth_callback endpoint.
	OauthCallbackDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		IntrospectDoer:      doer,
		AuthURLDoer:         doer,
		OauthCallbackDoer:   doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Introspect returns an endpoint that makes HTTP requests to the auth service
// introspect server.
func (c *Client) Introspect() goa.Endpoint {
	var (
		encodeRequest  = EncodeIntrospectRequest(c.encoder)
		decodeResponse = DecodeIntrospectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildIntrospectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IntrospectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "introspect", err)
		}
		return decodeResponse(resp)
	}
}

// AuthURL returns an endpoint that makes HTTP requests to the auth service
// auth_url server.
func (c *Client) AuthURL() goa.Endpoint {
	var (
		decodeResponse = DecodeAuthURLResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthURLRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthURLDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "auth_url", err)
		}
		return decodeResponse(resp)
	}
}

// OauthCallback returns an endpoint that makes HTTP requests to the auth
// service oauth_callback server.
func (c *Client) OauthCallback() goa.Endpoint {
	var (
		encodeRequest  = EncodeOauthCallbackRequest(c.encoder)
		decodeResponse = DecodeOauthCallbackResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildOauthCallbackRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.OauthCallbackDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "oauth_callback", err)
		}
		return decodeResponse(resp)
	}
}
