// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/auth/design

package client

import (
	goa "goa.design/goa/v3/pkg"
	auth "object-t.com/hackz-giganoto/microservices/auth/gen/auth"
)

// IntrospectRequestBody is the type of the "auth" service "introspect"
// endpoint HTTP request body.
type IntrospectRequestBody struct {
	// Opaque token to introspect
	Token string `form:"token" json:"token" xml:"token"`
}

// IntrospectResponseBody is the type of the "auth" service "introspect"
// endpoint HTTP response body.
type IntrospectResponseBody struct {
	// Internal JWT token for downstream services
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
	// Whether the token is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// Token expiration timestamp
	Exp *int64 `form:"exp,omitempty" json:"exp,omitempty" xml:"exp,omitempty"`
	// Token scopes
	Scopes []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
}

// AuthURLResponseBody is the type of the "auth" service "auth_url" endpoint
// HTTP response body.
type AuthURLResponseBody struct {
	// GitHub OAuth authorization URL
	AuthURL *string `form:"auth_url,omitempty" json:"auth_url,omitempty" xml:"auth_url,omitempty"`
	// OAuth state parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// OauthCallbackResponseBody is the type of the "auth" service "oauth_callback"
// endpoint HTTP response body.
type OauthCallbackResponseBody struct {
	// Opaque access token
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// Token type (Bearer)
	TokenType *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	// Token expiration in seconds
	ExpiresIn *int64 `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// GitHub user ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// NewIntrospectRequestBody builds the HTTP request body from the payload of
// the "introspect" endpoint of the "auth" service.
func NewIntrospectRequestBody(p *auth.IntrospectPayload) *IntrospectRequestBody {
	body := &IntrospectRequestBody{
		Token: p.Token,
	}
	return body
}

// NewIntrospectResultOK builds a "auth" service "introspect" endpoint result
// from a HTTP "OK" response.
func NewIntrospectResultOK(body *IntrospectResponseBody) *auth.IntrospectResult {
	v := &auth.IntrospectResult{
		JWT:    *body.JWT,
		Active: *body.Active,
		Exp:    body.Exp,
	}
	if body.Scopes != nil {
		v.Scopes = make([]string, len(body.Scopes))
		for i, val := range body.Scopes {
			v.Scopes[i] = val
		}
	}

	return v
}

// NewIntrospectInternalError builds a auth service introspect endpoint
// internal_error error.
func NewIntrospectInternalError(body string) auth.InternalError {
	v := auth.InternalError(body)

	return v
}

// NewIntrospectInvalidToken builds a auth service introspect endpoint
// invalid_token error.
func NewIntrospectInvalidToken(body string) auth.InvalidToken {
	v := auth.InvalidToken(body)

	return v
}

// NewAuthURLResultOK builds a "auth" service "auth_url" endpoint result from a
// HTTP "OK" response.
func NewAuthURLResultOK(body *AuthURLResponseBody) *auth.AuthURLResult {
	v := &auth.AuthURLResult{
		AuthURL: *body.AuthURL,
		State:   *body.State,
	}

	return v
}

// NewAuthURLInternalError builds a auth service auth_url endpoint
// internal_error error.
func NewAuthURLInternalError(body string) auth.InternalError {
	v := auth.InternalError(body)

	return v
}

// NewOauthCallbackResultOK builds a "auth" service "oauth_callback" endpoint
// result from a HTTP "OK" response.
func NewOauthCallbackResultOK(body *OauthCallbackResponseBody) *auth.OauthCallbackResult {
	v := &auth.OauthCallbackResult{
		AccessToken: *body.AccessToken,
		TokenType:   *body.TokenType,
		ExpiresIn:   *body.ExpiresIn,
		UserID:      *body.UserID,
	}

	return v
}

// NewOauthCallbackGithubError builds a auth service oauth_callback endpoint
// github_error error.
func NewOauthCallbackGithubError(body string) auth.GithubError {
	v := auth.GithubError(body)

	return v
}

// NewOauthCallbackInternalError builds a auth service oauth_callback endpoint
// internal_error error.
func NewOauthCallbackInternalError(body string) auth.InternalError {
	v := auth.InternalError(body)

	return v
}

// NewOauthCallbackInvalidCode builds a auth service oauth_callback endpoint
// invalid_code error.
func NewOauthCallbackInvalidCode(body string) auth.InvalidCode {
	v := auth.InvalidCode(body)

	return v
}

// NewOauthCallbackInvalidState builds a auth service oauth_callback endpoint
// invalid_state error.
func NewOauthCallbackInvalidState(body string) auth.InvalidState {
	v := auth.InvalidState(body)

	return v
}

// ValidateIntrospectResponseBody runs the validations defined on
// IntrospectResponseBody
func ValidateIntrospectResponseBody(body *IntrospectResponseBody) (err error) {
	if body.JWT == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jwt", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	return
}

// ValidateAuthURLResponseBody runs the validations defined on
// auth_url_response_body
func ValidateAuthURLResponseBody(body *AuthURLResponseBody) (err error) {
	if body.AuthURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("auth_url", "body"))
	}
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state", "body"))
	}
	return
}

// ValidateOauthCallbackResponseBody runs the validations defined on
// oauth_callback_response_body
func ValidateOauthCallbackResponseBody(body *OauthCallbackResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.TokenType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_type", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	return
}
