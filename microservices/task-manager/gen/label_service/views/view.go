// Code generated by goa v3.21.1, DO NOT EDIT.
//
// LabelService views
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// LabelCollection is the viewed result type that is projected based on a view.
type LabelCollection struct {
	// Type to project
	Projected LabelCollectionView
	// View to render
	View string
}

// Label is the viewed result type that is projected based on a view.
type Label struct {
	// Type to project
	Projected *LabelView
	// View to render
	View string
}

// LabelCollectionView is a type that runs validations on a projected type.
type LabelCollectionView []*LabelView

// LabelView is a type that runs validations on a projected type.
type LabelView struct {
	// ラベルのユニークID
	ID *string
	// ラベル名
	Name *string
	// 色 (例: #d73a4a)
	Color *string
}

var (
	// LabelCollectionMap is a map indexing the attribute names of LabelCollection
	// by view name.
	LabelCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
			"color",
		},
	}
	// LabelMap is a map indexing the attribute names of Label by view name.
	LabelMap = map[string][]string{
		"default": {
			"id",
			"name",
			"color",
		},
	}
)

// ValidateLabelCollection runs the validations defined on the viewed result
// type LabelCollection.
func ValidateLabelCollection(result LabelCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLabelCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateLabel runs the validations defined on the viewed result type Label.
func ValidateLabel(result *Label) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateLabelView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateLabelCollectionView runs the validations defined on
// LabelCollectionView using the "default" view.
func ValidateLabelCollectionView(result LabelCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateLabelView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLabelView runs the validations defined on LabelView using the
// "default" view.
func ValidateLabelView(result *LabelView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "result"))
	}
	return
}
