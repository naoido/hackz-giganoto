// Code generated by goa v3.21.1, DO NOT EDIT.
//
// LabelService service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package labelservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	labelserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service/views"
)

// ラベルを管理するサービス
type Service interface {
	// ラベルの一覧を取得します。
	List(context.Context) (res LabelCollection, err error)
	// 指定されたIDのラベルを取得します。
	Get(context.Context, *GetPayload) (res *Label, err error)
	// 新しいラベルを作成します。
	Create(context.Context, *CreatePayload) (res *Label, err error)
	// 既存のラベルを更新します。
	Update(context.Context, *UpdatePayload) (res *Label, err error)
	// ラベルを削除します。
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "task-manager"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "LabelService"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"List", "Get", "Create", "Update", "Delete"}

// CreatePayload is the payload type of the LabelService service Create method.
type CreatePayload struct {
	// ラベル名
	Name string
	// 色 (例: #d73a4a)
	Color string
}

// DeletePayload is the payload type of the LabelService service Delete method.
type DeletePayload struct {
	// ラベルID
	ID string
}

// GetPayload is the payload type of the LabelService service Get method.
type GetPayload struct {
	// ラベルID
	ID string
}

// Label is the result type of the LabelService service Get method.
type Label struct {
	// ラベルのユニークID
	ID string
	// ラベル名
	Name string
	// 色 (例: #d73a4a)
	Color string
}

// LabelCollection is the result type of the LabelService service List method.
type LabelCollection []*Label

// UpdatePayload is the payload type of the LabelService service Update method.
type UpdatePayload struct {
	// ラベルID
	ID string
	// ラベル名
	Name *string
	// 色 (例: #d73a4a)
	Color *string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewLabelCollection initializes result type LabelCollection from viewed
// result type LabelCollection.
func NewLabelCollection(vres labelserviceviews.LabelCollection) LabelCollection {
	return newLabelCollection(vres.Projected)
}

// NewViewedLabelCollection initializes viewed result type LabelCollection from
// result type LabelCollection using the given view.
func NewViewedLabelCollection(res LabelCollection, view string) labelserviceviews.LabelCollection {
	p := newLabelCollectionView(res)
	return labelserviceviews.LabelCollection{Projected: p, View: "default"}
}

// NewLabel initializes result type Label from viewed result type Label.
func NewLabel(vres *labelserviceviews.Label) *Label {
	return newLabel(vres.Projected)
}

// NewViewedLabel initializes viewed result type Label from result type Label
// using the given view.
func NewViewedLabel(res *Label, view string) *labelserviceviews.Label {
	p := newLabelView(res)
	return &labelserviceviews.Label{Projected: p, View: "default"}
}

// newLabelCollection converts projected type LabelCollection to service type
// LabelCollection.
func newLabelCollection(vres labelserviceviews.LabelCollectionView) LabelCollection {
	res := make(LabelCollection, len(vres))
	for i, n := range vres {
		res[i] = newLabel(n)
	}
	return res
}

// newLabelCollectionView projects result type LabelCollection to projected
// type LabelCollectionView using the "default" view.
func newLabelCollectionView(res LabelCollection) labelserviceviews.LabelCollectionView {
	vres := make(labelserviceviews.LabelCollectionView, len(res))
	for i, n := range res {
		vres[i] = newLabelView(n)
	}
	return vres
}

// newLabel converts projected type Label to service type Label.
func newLabel(vres *labelserviceviews.LabelView) *Label {
	res := &Label{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Color != nil {
		res.Color = *vres.Color
	}
	return res
}

// newLabelView projects result type Label to projected type LabelView using
// the "default" view.
func newLabelView(res *Label) *labelserviceviews.LabelView {
	vres := &labelserviceviews.LabelView{
		ID:    &res.ID,
		Name:  &res.Name,
		Color: &res.Color,
	}
	return vres
}
