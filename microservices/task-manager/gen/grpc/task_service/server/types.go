// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package server

import (
	task_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/task_service/pb"
	taskservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service"
	taskserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service/views"
)

// NewListPayload builds the payload of the "List" endpoint of the
// "TaskService" service from the gRPC request type.
func NewListPayload(message *task_servicepb.ListRequest) *taskservice.ListPayload {
	v := &taskservice.ListPayload{
		Status:     message.Status,
		AssigneeID: message.AssigneeId,
		LabelID:    message.LabelId,
	}
	return v
}

// NewProtoTaskCollection builds the gRPC response type from the result of the
// "List" endpoint of the "TaskService" service.
func NewProtoTaskCollection(result taskserviceviews.TaskCollectionView) *task_servicepb.TaskCollection {
	message := &task_servicepb.TaskCollection{}
	message.Field = make([]*task_servicepb.Task, len(result))
	for i, val := range result {
		message.Field[i] = &task_servicepb.Task{
			Id:          *val.ID,
			Title:       *val.Title,
			Description: val.Description,
			Status:      *val.Status,
			CreatedAt:   *val.CreatedAt,
			UpdatedAt:   *val.UpdatedAt,
		}
		if val.AssigneeIds != nil {
			message.Field[i].AssigneeIds = make([]string, len(val.AssigneeIds))
			for j, val := range val.AssigneeIds {
				message.Field[i].AssigneeIds[j] = val
			}
		}
		if val.LabelIds != nil {
			message.Field[i].LabelIds = make([]string, len(val.LabelIds))
			for j, val := range val.LabelIds {
				message.Field[i].LabelIds[j] = val
			}
		}
	}
	return message
}

// NewGetPayload builds the payload of the "Get" endpoint of the "TaskService"
// service from the gRPC request type.
func NewGetPayload(message *task_servicepb.GetRequest) *taskservice.GetPayload {
	v := &taskservice.GetPayload{
		ID: message.Id,
	}
	return v
}

// NewProtoGetResponse builds the gRPC response type from the result of the
// "Get" endpoint of the "TaskService" service.
func NewProtoGetResponse(result *taskserviceviews.TaskView) *task_servicepb.GetResponse {
	message := &task_servicepb.GetResponse{
		Id:          *result.ID,
		Title:       *result.Title,
		Description: result.Description,
		Status:      *result.Status,
		CreatedAt:   *result.CreatedAt,
		UpdatedAt:   *result.UpdatedAt,
	}
	if result.AssigneeIds != nil {
		message.AssigneeIds = make([]string, len(result.AssigneeIds))
		for i, val := range result.AssigneeIds {
			message.AssigneeIds[i] = val
		}
	}
	if result.LabelIds != nil {
		message.LabelIds = make([]string, len(result.LabelIds))
		for i, val := range result.LabelIds {
			message.LabelIds[i] = val
		}
	}
	return message
}

// NewCreatePayload builds the payload of the "Create" endpoint of the
// "TaskService" service from the gRPC request type.
func NewCreatePayload(message *task_servicepb.CreateRequest) *taskservice.CreatePayload {
	v := &taskservice.CreatePayload{
		Title:       message.Title,
		Description: message.Description,
	}
	if message.AssigneeIds != nil {
		v.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			v.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		v.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			v.LabelIds[i] = val
		}
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "Create" endpoint of the "TaskService" service.
func NewProtoCreateResponse(result *taskserviceviews.TaskView) *task_servicepb.CreateResponse {
	message := &task_servicepb.CreateResponse{
		Id:          *result.ID,
		Title:       *result.Title,
		Description: result.Description,
		Status:      *result.Status,
		CreatedAt:   *result.CreatedAt,
		UpdatedAt:   *result.UpdatedAt,
	}
	if result.AssigneeIds != nil {
		message.AssigneeIds = make([]string, len(result.AssigneeIds))
		for i, val := range result.AssigneeIds {
			message.AssigneeIds[i] = val
		}
	}
	if result.LabelIds != nil {
		message.LabelIds = make([]string, len(result.LabelIds))
		for i, val := range result.LabelIds {
			message.LabelIds[i] = val
		}
	}
	return message
}

// NewUpdatePayload builds the payload of the "Update" endpoint of the
// "TaskService" service from the gRPC request type.
func NewUpdatePayload(message *task_servicepb.UpdateRequest) *taskservice.UpdatePayload {
	v := &taskservice.UpdatePayload{
		ID:          message.Id,
		Title:       message.Title,
		Description: message.Description,
		Status:      message.Status,
	}
	if message.AssigneeIds != nil {
		v.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			v.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		v.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			v.LabelIds[i] = val
		}
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "Update" endpoint of the "TaskService" service.
func NewProtoUpdateResponse(result *taskserviceviews.TaskView) *task_servicepb.UpdateResponse {
	message := &task_servicepb.UpdateResponse{
		Id:          *result.ID,
		Title:       *result.Title,
		Description: result.Description,
		Status:      *result.Status,
		CreatedAt:   *result.CreatedAt,
		UpdatedAt:   *result.UpdatedAt,
	}
	if result.AssigneeIds != nil {
		message.AssigneeIds = make([]string, len(result.AssigneeIds))
		for i, val := range result.AssigneeIds {
			message.AssigneeIds[i] = val
		}
	}
	if result.LabelIds != nil {
		message.LabelIds = make([]string, len(result.LabelIds))
		for i, val := range result.LabelIds {
			message.LabelIds[i] = val
		}
	}
	return message
}

// NewDeletePayload builds the payload of the "Delete" endpoint of the
// "TaskService" service from the gRPC request type.
func NewDeletePayload(message *task_servicepb.DeleteRequest) *taskservice.DeletePayload {
	v := &taskservice.DeletePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "Delete" endpoint of the "TaskService" service.
func NewProtoDeleteResponse() *task_servicepb.DeleteResponse {
	message := &task_servicepb.DeleteResponse{}
	return message
}
