// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService gRPC server
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package server

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	task_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/task_service/pb"
	taskservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service"
)

// Server implements the task_servicepb.TaskServiceServer interface.
type Server struct {
	ListH   goagrpc.UnaryHandler
	GetH    goagrpc.UnaryHandler
	CreateH goagrpc.UnaryHandler
	UpdateH goagrpc.UnaryHandler
	DeleteH goagrpc.UnaryHandler
	task_servicepb.UnimplementedTaskServiceServer
}

// New instantiates the server struct with the TaskService service endpoints.
func New(e *taskservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ListH:   NewListHandler(e.List, uh),
		GetH:    NewGetHandler(e.Get, uh),
		CreateH: NewCreateHandler(e.Create, uh),
		UpdateH: NewUpdateHandler(e.Update, uh),
		DeleteH: NewDeleteHandler(e.Delete, uh),
	}
}

// NewListHandler creates a gRPC handler which serves the "TaskService" service
// "List" endpoint.
func NewListHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeListRequest, EncodeListResponse)
	}
	return h
}

// List implements the "List" method in task_servicepb.TaskServiceServer
// interface.
func (s *Server) List(ctx context.Context, message *task_servicepb.ListRequest) (*task_servicepb.TaskCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "List")
	ctx = context.WithValue(ctx, goa.ServiceKey, "TaskService")
	resp, err := s.ListH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*task_servicepb.TaskCollection), nil
}

// NewGetHandler creates a gRPC handler which serves the "TaskService" service
// "Get" endpoint.
func NewGetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetRequest, EncodeGetResponse)
	}
	return h
}

// Get implements the "Get" method in task_servicepb.TaskServiceServer
// interface.
func (s *Server) Get(ctx context.Context, message *task_servicepb.GetRequest) (*task_servicepb.GetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Get")
	ctx = context.WithValue(ctx, goa.ServiceKey, "TaskService")
	resp, err := s.GetH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*task_servicepb.GetResponse), nil
}

// NewCreateHandler creates a gRPC handler which serves the "TaskService"
// service "Create" endpoint.
func NewCreateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateRequest, EncodeCreateResponse)
	}
	return h
}

// Create implements the "Create" method in task_servicepb.TaskServiceServer
// interface.
func (s *Server) Create(ctx context.Context, message *task_servicepb.CreateRequest) (*task_servicepb.CreateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Create")
	ctx = context.WithValue(ctx, goa.ServiceKey, "TaskService")
	resp, err := s.CreateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*task_servicepb.CreateResponse), nil
}

// NewUpdateHandler creates a gRPC handler which serves the "TaskService"
// service "Update" endpoint.
func NewUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateRequest, EncodeUpdateResponse)
	}
	return h
}

// Update implements the "Update" method in task_servicepb.TaskServiceServer
// interface.
func (s *Server) Update(ctx context.Context, message *task_servicepb.UpdateRequest) (*task_servicepb.UpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "TaskService")
	resp, err := s.UpdateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*task_servicepb.UpdateResponse), nil
}

// NewDeleteHandler creates a gRPC handler which serves the "TaskService"
// service "Delete" endpoint.
func NewDeleteHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteRequest, EncodeDeleteResponse)
	}
	return h
}

// Delete implements the "Delete" method in task_servicepb.TaskServiceServer
// interface.
func (s *Server) Delete(ctx context.Context, message *task_servicepb.DeleteRequest) (*task_servicepb.DeleteResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Delete")
	ctx = context.WithValue(ctx, goa.ServiceKey, "TaskService")
	resp, err := s.DeleteH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*task_servicepb.DeleteResponse), nil
}
