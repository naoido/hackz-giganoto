// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService gRPC client types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	task_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/task_service/pb"
	taskservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service"
	taskserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service/views"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "List" endpoint of the "TaskService" service.
func NewProtoListRequest(payload *taskservice.ListPayload) *task_servicepb.ListRequest {
	message := &task_servicepb.ListRequest{
		Status:     payload.Status,
		AssigneeId: payload.AssigneeID,
		LabelId:    payload.LabelID,
	}
	return message
}

// NewListResult builds the result type of the "List" endpoint of the
// "TaskService" service from the gRPC response type.
func NewListResult(message *task_servicepb.TaskCollection) taskserviceviews.TaskCollectionView {
	result := make([]*taskserviceviews.TaskView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &taskserviceviews.TaskView{
			ID:          &val.Id,
			Title:       &val.Title,
			Description: val.Description,
			Status:      &val.Status,
			CreatedAt:   &val.CreatedAt,
			UpdatedAt:   &val.UpdatedAt,
		}
		if val.AssigneeIds != nil {
			result[i].AssigneeIds = make([]string, len(val.AssigneeIds))
			for j, val := range val.AssigneeIds {
				result[i].AssigneeIds[j] = val
			}
		}
		if val.LabelIds != nil {
			result[i].LabelIds = make([]string, len(val.LabelIds))
			for j, val := range val.LabelIds {
				result[i].LabelIds[j] = val
			}
		}
	}
	return result
}

// NewProtoGetRequest builds the gRPC request type from the payload of the
// "Get" endpoint of the "TaskService" service.
func NewProtoGetRequest(payload *taskservice.GetPayload) *task_servicepb.GetRequest {
	message := &task_servicepb.GetRequest{
		Id: payload.ID,
	}
	return message
}

// NewGetResult builds the result type of the "Get" endpoint of the
// "TaskService" service from the gRPC response type.
func NewGetResult(message *task_servicepb.GetResponse) *taskserviceviews.TaskView {
	result := &taskserviceviews.TaskView{
		ID:          &message.Id,
		Title:       &message.Title,
		Description: message.Description,
		Status:      &message.Status,
		CreatedAt:   &message.CreatedAt,
		UpdatedAt:   &message.UpdatedAt,
	}
	if message.AssigneeIds != nil {
		result.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			result.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		result.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			result.LabelIds[i] = val
		}
	}
	return result
}

// NewProtoCreateRequest builds the gRPC request type from the payload of the
// "Create" endpoint of the "TaskService" service.
func NewProtoCreateRequest(payload *taskservice.CreatePayload) *task_servicepb.CreateRequest {
	message := &task_servicepb.CreateRequest{
		Title:       payload.Title,
		Description: payload.Description,
	}
	if payload.AssigneeIds != nil {
		message.AssigneeIds = make([]string, len(payload.AssigneeIds))
		for i, val := range payload.AssigneeIds {
			message.AssigneeIds[i] = val
		}
	}
	if payload.LabelIds != nil {
		message.LabelIds = make([]string, len(payload.LabelIds))
		for i, val := range payload.LabelIds {
			message.LabelIds[i] = val
		}
	}
	return message
}

// NewCreateResult builds the result type of the "Create" endpoint of the
// "TaskService" service from the gRPC response type.
func NewCreateResult(message *task_servicepb.CreateResponse) *taskserviceviews.TaskView {
	result := &taskserviceviews.TaskView{
		ID:          &message.Id,
		Title:       &message.Title,
		Description: message.Description,
		Status:      &message.Status,
		CreatedAt:   &message.CreatedAt,
		UpdatedAt:   &message.UpdatedAt,
	}
	if message.AssigneeIds != nil {
		result.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			result.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		result.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			result.LabelIds[i] = val
		}
	}
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "Update" endpoint of the "TaskService" service.
func NewProtoUpdateRequest(payload *taskservice.UpdatePayload) *task_servicepb.UpdateRequest {
	message := &task_servicepb.UpdateRequest{
		Id:          payload.ID,
		Title:       payload.Title,
		Description: payload.Description,
		Status:      payload.Status,
	}
	if payload.AssigneeIds != nil {
		message.AssigneeIds = make([]string, len(payload.AssigneeIds))
		for i, val := range payload.AssigneeIds {
			message.AssigneeIds[i] = val
		}
	}
	if payload.LabelIds != nil {
		message.LabelIds = make([]string, len(payload.LabelIds))
		for i, val := range payload.LabelIds {
			message.LabelIds[i] = val
		}
	}
	return message
}

// NewUpdateResult builds the result type of the "Update" endpoint of the
// "TaskService" service from the gRPC response type.
func NewUpdateResult(message *task_servicepb.UpdateResponse) *taskserviceviews.TaskView {
	result := &taskserviceviews.TaskView{
		ID:          &message.Id,
		Title:       &message.Title,
		Description: message.Description,
		Status:      &message.Status,
		CreatedAt:   &message.CreatedAt,
		UpdatedAt:   &message.UpdatedAt,
	}
	if message.AssigneeIds != nil {
		result.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			result.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		result.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			result.LabelIds[i] = val
		}
	}
	return result
}

// NewProtoDeleteRequest builds the gRPC request type from the payload of the
// "Delete" endpoint of the "TaskService" service.
func NewProtoDeleteRequest(payload *taskservice.DeletePayload) *task_servicepb.DeleteRequest {
	message := &task_servicepb.DeleteRequest{
		Id: payload.ID,
	}
	return message
}
