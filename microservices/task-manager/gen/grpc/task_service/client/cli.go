// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	"encoding/json"
	"fmt"

	task_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/task_service/pb"
	taskservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service"
)

// BuildListPayload builds the payload for the TaskService List endpoint from
// CLI flags.
func BuildListPayload(taskServiceListMessage string) (*taskservice.ListPayload, error) {
	var err error
	var message task_servicepb.ListRequest
	{
		if taskServiceListMessage != "" {
			err = json.Unmarshal([]byte(taskServiceListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"assignee_id\": \"Beatae rerum sint.\",\n      \"label_id\": \"Ut ut ut ipsa beatae veritatis qui.\",\n      \"status\": \"Blanditiis error consectetur est placeat nihil quaerat.\"\n   }'")
			}
		}
	}
	v := &taskservice.ListPayload{
		Status:     message.Status,
		AssigneeID: message.AssigneeId,
		LabelID:    message.LabelId,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the TaskService Get endpoint from CLI
// flags.
func BuildGetPayload(taskServiceGetMessage string) (*taskservice.GetPayload, error) {
	var err error
	var message task_servicepb.GetRequest
	{
		if taskServiceGetMessage != "" {
			err = json.Unmarshal([]byte(taskServiceGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Eum voluptatem.\"\n   }'")
			}
		}
	}
	v := &taskservice.GetPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildCreatePayload builds the payload for the TaskService Create endpoint
// from CLI flags.
func BuildCreatePayload(taskServiceCreateMessage string) (*taskservice.CreatePayload, error) {
	var err error
	var message task_servicepb.CreateRequest
	{
		if taskServiceCreateMessage != "" {
			err = json.Unmarshal([]byte(taskServiceCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"assignee_ids\": [\n         \"Ratione velit tenetur et.\",\n         \"Tempore unde quidem et animi.\",\n         \"Recusandae delectus commodi dolorem molestiae.\"\n      ],\n      \"description\": \"Ipsum ratione ullam dignissimos non quis.\",\n      \"label_ids\": [\n         \"Doloremque sit deleniti.\",\n         \"Et rerum.\"\n      ],\n      \"title\": \"Itaque ea mollitia aut cum.\"\n   }'")
			}
		}
	}
	v := &taskservice.CreatePayload{
		Title:       message.Title,
		Description: message.Description,
	}
	if message.AssigneeIds != nil {
		v.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			v.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		v.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			v.LabelIds[i] = val
		}
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the TaskService Update endpoint
// from CLI flags.
func BuildUpdatePayload(taskServiceUpdateMessage string) (*taskservice.UpdatePayload, error) {
	var err error
	var message task_servicepb.UpdateRequest
	{
		if taskServiceUpdateMessage != "" {
			err = json.Unmarshal([]byte(taskServiceUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"assignee_ids\": [\n         \"Placeat ut.\",\n         \"Odit occaecati id nemo saepe dolorum.\"\n      ],\n      \"description\": \"Iste qui consequatur nulla.\",\n      \"id\": \"Doloremque repellat.\",\n      \"label_ids\": [\n         \"Rem quam libero veniam delectus molestias sed.\",\n         \"Sunt qui quo corporis vero maxime quis.\",\n         \"Earum reiciendis aut illo voluptates.\",\n         \"Sed aspernatur.\"\n      ],\n      \"status\": \"Et ea consectetur nam qui pariatur magnam.\",\n      \"title\": \"Eaque delectus delectus asperiores sint.\"\n   }'")
			}
		}
	}
	v := &taskservice.UpdatePayload{
		ID:          message.Id,
		Title:       message.Title,
		Description: message.Description,
		Status:      message.Status,
	}
	if message.AssigneeIds != nil {
		v.AssigneeIds = make([]string, len(message.AssigneeIds))
		for i, val := range message.AssigneeIds {
			v.AssigneeIds[i] = val
		}
	}
	if message.LabelIds != nil {
		v.LabelIds = make([]string, len(message.LabelIds))
		for i, val := range message.LabelIds {
			v.LabelIds[i] = val
		}
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the TaskService Delete endpoint
// from CLI flags.
func BuildDeletePayload(taskServiceDeleteMessage string) (*taskservice.DeletePayload, error) {
	var err error
	var message task_servicepb.DeleteRequest
	{
		if taskServiceDeleteMessage != "" {
			err = json.Unmarshal([]byte(taskServiceDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Id nostrum numquam dolor.\"\n   }'")
			}
		}
	}
	v := &taskservice.DeletePayload{
		ID: message.Id,
	}

	return v, nil
}
