// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService gRPC client encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	task_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/task_service/pb"
	taskservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service"
	taskserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service/views"
)

// BuildListFunc builds the remote method to invoke for "TaskService" service
// "List" endpoint.
func BuildListFunc(grpccli task_servicepb.TaskServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*task_servicepb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &task_servicepb.ListRequest{}, opts...)
	}
}

// EncodeListRequest encodes requests sent to TaskService List endpoint.
func EncodeListRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*taskservice.ListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "List", "*taskservice.ListPayload", v)
	}
	return NewProtoListRequest(payload), nil
}

// DecodeListResponse decodes responses from the TaskService List endpoint.
func DecodeListResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*task_servicepb.TaskCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "List", "*task_servicepb.TaskCollection", v)
	}
	res := NewListResult(message)
	vres := taskserviceviews.TaskCollection{Projected: res, View: view}
	if err := taskserviceviews.ValidateTaskCollection(vres); err != nil {
		return nil, err
	}
	return taskservice.NewTaskCollection(vres), nil
}

// BuildGetFunc builds the remote method to invoke for "TaskService" service
// "Get" endpoint.
func BuildGetFunc(grpccli task_servicepb.TaskServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*task_servicepb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &task_servicepb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to TaskService Get endpoint.
func EncodeGetRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*taskservice.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Get", "*taskservice.GetPayload", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the TaskService Get endpoint.
func DecodeGetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*task_servicepb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Get", "*task_servicepb.GetResponse", v)
	}
	res := NewGetResult(message)
	vres := &taskserviceviews.Task{Projected: res, View: view}
	if err := taskserviceviews.ValidateTask(vres); err != nil {
		return nil, err
	}
	return taskservice.NewTask(vres), nil
}

// BuildCreateFunc builds the remote method to invoke for "TaskService" service
// "Create" endpoint.
func BuildCreateFunc(grpccli task_servicepb.TaskServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*task_servicepb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &task_servicepb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to TaskService Create endpoint.
func EncodeCreateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*taskservice.CreatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Create", "*taskservice.CreatePayload", v)
	}
	return NewProtoCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the TaskService Create endpoint.
func DecodeCreateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*task_servicepb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Create", "*task_servicepb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	vres := &taskserviceviews.Task{Projected: res, View: view}
	if err := taskserviceviews.ValidateTask(vres); err != nil {
		return nil, err
	}
	return taskservice.NewTask(vres), nil
}

// BuildUpdateFunc builds the remote method to invoke for "TaskService" service
// "Update" endpoint.
func BuildUpdateFunc(grpccli task_servicepb.TaskServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*task_servicepb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &task_servicepb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to TaskService Update endpoint.
func EncodeUpdateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*taskservice.UpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Update", "*taskservice.UpdatePayload", v)
	}
	return NewProtoUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the TaskService Update endpoint.
func DecodeUpdateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*task_servicepb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Update", "*task_servicepb.UpdateResponse", v)
	}
	res := NewUpdateResult(message)
	vres := &taskserviceviews.Task{Projected: res, View: view}
	if err := taskserviceviews.ValidateTask(vres); err != nil {
		return nil, err
	}
	return taskservice.NewTask(vres), nil
}

// BuildDeleteFunc builds the remote method to invoke for "TaskService" service
// "Delete" endpoint.
func BuildDeleteFunc(grpccli task_servicepb.TaskServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Delete(ctx, reqpb.(*task_servicepb.DeleteRequest), opts...)
		}
		return grpccli.Delete(ctx, &task_servicepb.DeleteRequest{}, opts...)
	}
}

// EncodeDeleteRequest encodes requests sent to TaskService Delete endpoint.
func EncodeDeleteRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*taskservice.DeletePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("TaskService", "Delete", "*taskservice.DeletePayload", v)
	}
	return NewProtoDeleteRequest(payload), nil
}
