// Code generated by goa v3.21.1, DO NOT EDIT.
//
// LabelService gRPC server encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package server

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
	label_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/label_service/pb"
	labelservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service"
	labelserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service/views"
)

// EncodeListResponse encodes responses from the "LabelService" service "List"
// endpoint.
func EncodeListResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(labelserviceviews.LabelCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "List", "labelserviceviews.LabelCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoLabelCollection(result)
	return resp, nil
}

// EncodeGetResponse encodes responses from the "LabelService" service "Get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*labelserviceviews.Label)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Get", "*labelserviceviews.Label", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "LabelService" service "Get"
// endpoint.
func DecodeGetRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *label_servicepb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*label_servicepb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("LabelService", "Get", "*label_servicepb.GetRequest", v)
		}
	}
	var payload *labelservice.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeCreateResponse encodes responses from the "LabelService" service
// "Create" endpoint.
func EncodeCreateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*labelserviceviews.Label)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Create", "*labelserviceviews.Label", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "LabelService" service "Create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *label_servicepb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*label_servicepb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("LabelService", "Create", "*label_servicepb.CreateRequest", v)
		}
	}
	var payload *labelservice.CreatePayload
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "LabelService" service
// "Update" endpoint.
func EncodeUpdateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*labelserviceviews.Label)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Update", "*labelserviceviews.Label", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "LabelService" service "Update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *label_servicepb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*label_servicepb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("LabelService", "Update", "*label_servicepb.UpdateRequest", v)
		}
	}
	var payload *labelservice.UpdatePayload
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "LabelService" service
// "Delete" endpoint.
func EncodeDeleteResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "LabelService" service "Delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *label_servicepb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*label_servicepb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("LabelService", "Delete", "*label_servicepb.DeleteRequest", v)
		}
	}
	var payload *labelservice.DeletePayload
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}
