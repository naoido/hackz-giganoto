// Code generated by goa v3.21.1, DO NOT EDIT.
//
// LabelService gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package server

import (
	label_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/label_service/pb"
	labelservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service"
	labelserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service/views"
)

// NewProtoLabelCollection builds the gRPC response type from the result of the
// "List" endpoint of the "LabelService" service.
func NewProtoLabelCollection(result labelserviceviews.LabelCollectionView) *label_servicepb.LabelCollection {
	message := &label_servicepb.LabelCollection{}
	message.Field = make([]*label_servicepb.Label, len(result))
	for i, val := range result {
		message.Field[i] = &label_servicepb.Label{
			Id:    *val.ID,
			Name:  *val.Name,
			Color: *val.Color,
		}
	}
	return message
}

// NewGetPayload builds the payload of the "Get" endpoint of the "LabelService"
// service from the gRPC request type.
func NewGetPayload(message *label_servicepb.GetRequest) *labelservice.GetPayload {
	v := &labelservice.GetPayload{
		ID: message.Id,
	}
	return v
}

// NewProtoGetResponse builds the gRPC response type from the result of the
// "Get" endpoint of the "LabelService" service.
func NewProtoGetResponse(result *labelserviceviews.LabelView) *label_servicepb.GetResponse {
	message := &label_servicepb.GetResponse{
		Id:    *result.ID,
		Name:  *result.Name,
		Color: *result.Color,
	}
	return message
}

// NewCreatePayload builds the payload of the "Create" endpoint of the
// "LabelService" service from the gRPC request type.
func NewCreatePayload(message *label_servicepb.CreateRequest) *labelservice.CreatePayload {
	v := &labelservice.CreatePayload{
		Name:  message.Name,
		Color: message.Color,
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "Create" endpoint of the "LabelService" service.
func NewProtoCreateResponse(result *labelserviceviews.LabelView) *label_servicepb.CreateResponse {
	message := &label_servicepb.CreateResponse{
		Id:    *result.ID,
		Name:  *result.Name,
		Color: *result.Color,
	}
	return message
}

// NewUpdatePayload builds the payload of the "Update" endpoint of the
// "LabelService" service from the gRPC request type.
func NewUpdatePayload(message *label_servicepb.UpdateRequest) *labelservice.UpdatePayload {
	v := &labelservice.UpdatePayload{
		ID:    message.Id,
		Name:  message.Name,
		Color: message.Color,
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "Update" endpoint of the "LabelService" service.
func NewProtoUpdateResponse(result *labelserviceviews.LabelView) *label_servicepb.UpdateResponse {
	message := &label_servicepb.UpdateResponse{
		Id:    *result.ID,
		Name:  *result.Name,
		Color: *result.Color,
	}
	return message
}

// NewDeletePayload builds the payload of the "Delete" endpoint of the
// "LabelService" service from the gRPC request type.
func NewDeletePayload(message *label_servicepb.DeleteRequest) *labelservice.DeletePayload {
	v := &labelservice.DeletePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "Delete" endpoint of the "LabelService" service.
func NewProtoDeleteResponse() *label_servicepb.DeleteResponse {
	message := &label_servicepb.DeleteResponse{}
	return message
}
