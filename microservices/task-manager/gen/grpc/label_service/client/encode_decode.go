// Code generated by goa v3.21.1, DO NOT EDIT.
//
// LabelService gRPC client encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	label_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/label_service/pb"
	labelservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service"
	labelserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service/views"
)

// BuildListFunc builds the remote method to invoke for "LabelService" service
// "List" endpoint.
func BuildListFunc(grpccli label_servicepb.LabelServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*label_servicepb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &label_servicepb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the LabelService List endpoint.
func DecodeListResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*label_servicepb.LabelCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "List", "*label_servicepb.LabelCollection", v)
	}
	res := NewListResult(message)
	vres := labelserviceviews.LabelCollection{Projected: res, View: view}
	if err := labelserviceviews.ValidateLabelCollection(vres); err != nil {
		return nil, err
	}
	return labelservice.NewLabelCollection(vres), nil
}

// BuildGetFunc builds the remote method to invoke for "LabelService" service
// "Get" endpoint.
func BuildGetFunc(grpccli label_servicepb.LabelServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*label_servicepb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &label_servicepb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to LabelService Get endpoint.
func EncodeGetRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*labelservice.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Get", "*labelservice.GetPayload", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the LabelService Get endpoint.
func DecodeGetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*label_servicepb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Get", "*label_servicepb.GetResponse", v)
	}
	res := NewGetResult(message)
	vres := &labelserviceviews.Label{Projected: res, View: view}
	if err := labelserviceviews.ValidateLabel(vres); err != nil {
		return nil, err
	}
	return labelservice.NewLabel(vres), nil
}

// BuildCreateFunc builds the remote method to invoke for "LabelService"
// service "Create" endpoint.
func BuildCreateFunc(grpccli label_servicepb.LabelServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*label_servicepb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &label_servicepb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to LabelService Create endpoint.
func EncodeCreateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*labelservice.CreatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Create", "*labelservice.CreatePayload", v)
	}
	return NewProtoCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the LabelService Create endpoint.
func DecodeCreateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*label_servicepb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Create", "*label_servicepb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	vres := &labelserviceviews.Label{Projected: res, View: view}
	if err := labelserviceviews.ValidateLabel(vres); err != nil {
		return nil, err
	}
	return labelservice.NewLabel(vres), nil
}

// BuildUpdateFunc builds the remote method to invoke for "LabelService"
// service "Update" endpoint.
func BuildUpdateFunc(grpccli label_servicepb.LabelServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*label_servicepb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &label_servicepb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to LabelService Update endpoint.
func EncodeUpdateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*labelservice.UpdatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Update", "*labelservice.UpdatePayload", v)
	}
	return NewProtoUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the LabelService Update endpoint.
func DecodeUpdateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*label_servicepb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Update", "*label_servicepb.UpdateResponse", v)
	}
	res := NewUpdateResult(message)
	vres := &labelserviceviews.Label{Projected: res, View: view}
	if err := labelserviceviews.ValidateLabel(vres); err != nil {
		return nil, err
	}
	return labelservice.NewLabel(vres), nil
}

// BuildDeleteFunc builds the remote method to invoke for "LabelService"
// service "Delete" endpoint.
func BuildDeleteFunc(grpccli label_servicepb.LabelServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Delete(ctx, reqpb.(*label_servicepb.DeleteRequest), opts...)
		}
		return grpccli.Delete(ctx, &label_servicepb.DeleteRequest{}, opts...)
	}
}

// EncodeDeleteRequest encodes requests sent to LabelService Delete endpoint.
func EncodeDeleteRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*labelservice.DeletePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("LabelService", "Delete", "*labelservice.DeletePayload", v)
	}
	return NewProtoDeleteRequest(payload), nil
}
