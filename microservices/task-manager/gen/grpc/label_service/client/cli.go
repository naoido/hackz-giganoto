// Code generated by goa v3.21.1, DO NOT EDIT.
//
// LabelService gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	"encoding/json"
	"fmt"

	label_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/label_service/pb"
	labelservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/label_service"
)

// BuildGetPayload builds the payload for the LabelService Get endpoint from
// CLI flags.
func BuildGetPayload(labelServiceGetMessage string) (*labelservice.GetPayload, error) {
	var err error
	var message label_servicepb.GetRequest
	{
		if labelServiceGetMessage != "" {
			err = json.Unmarshal([]byte(labelServiceGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Et ut.\"\n   }'")
			}
		}
	}
	v := &labelservice.GetPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildCreatePayload builds the payload for the LabelService Create endpoint
// from CLI flags.
func BuildCreatePayload(labelServiceCreateMessage string) (*labelservice.CreatePayload, error) {
	var err error
	var message label_servicepb.CreateRequest
	{
		if labelServiceCreateMessage != "" {
			err = json.Unmarshal([]byte(labelServiceCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"color\": \"Commodi inventore.\",\n      \"name\": \"Soluta occaecati ut voluptas doloribus.\"\n   }'")
			}
		}
	}
	v := &labelservice.CreatePayload{
		Name:  message.Name,
		Color: message.Color,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the LabelService Update endpoint
// from CLI flags.
func BuildUpdatePayload(labelServiceUpdateMessage string) (*labelservice.UpdatePayload, error) {
	var err error
	var message label_servicepb.UpdateRequest
	{
		if labelServiceUpdateMessage != "" {
			err = json.Unmarshal([]byte(labelServiceUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"color\": \"Placeat recusandae.\",\n      \"id\": \"Magnam quia aut dolorem.\",\n      \"name\": \"Alias ab perferendis asperiores autem repudiandae distinctio.\"\n   }'")
			}
		}
	}
	v := &labelservice.UpdatePayload{
		ID:    message.Id,
		Name:  message.Name,
		Color: message.Color,
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the LabelService Delete endpoint
// from CLI flags.
func BuildDeletePayload(labelServiceDeleteMessage string) (*labelservice.DeletePayload, error) {
	var err error
	var message label_servicepb.DeleteRequest
	{
		if labelServiceDeleteMessage != "" {
			err = json.Unmarshal([]byte(labelServiceDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Et perferendis exercitationem et.\"\n   }'")
			}
		}
	}
	v := &labelservice.DeletePayload{
		ID: message.Id,
	}

	return v, nil
}
