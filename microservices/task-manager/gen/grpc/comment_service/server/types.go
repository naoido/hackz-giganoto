// Code generated by goa v3.21.1, DO NOT EDIT.
//
// CommentService gRPC server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package server

import (
	commentservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service"
	commentserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service/views"
	comment_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/comment_service/pb"
)

// NewListPayload builds the payload of the "List" endpoint of the
// "CommentService" service from the gRPC request type.
func NewListPayload(message *comment_servicepb.ListRequest) *commentservice.ListPayload {
	v := &commentservice.ListPayload{
		TaskID: message.TaskId,
	}
	return v
}

// NewProtoCommentCollection builds the gRPC response type from the result of
// the "List" endpoint of the "CommentService" service.
func NewProtoCommentCollection(result commentserviceviews.CommentCollectionView) *comment_servicepb.CommentCollection {
	message := &comment_servicepb.CommentCollection{}
	message.Field = make([]*comment_servicepb.Comment, len(result))
	for i, val := range result {
		message.Field[i] = &comment_servicepb.Comment{
			Id:        *val.ID,
			TaskId:    *val.TaskID,
			AuthorId:  *val.AuthorID,
			Body:      *val.Body,
			CreatedAt: *val.CreatedAt,
		}
	}
	return message
}

// NewGetPayload builds the payload of the "Get" endpoint of the
// "CommentService" service from the gRPC request type.
func NewGetPayload(message *comment_servicepb.GetRequest) *commentservice.GetPayload {
	v := &commentservice.GetPayload{
		ID: message.Id,
	}
	return v
}

// NewProtoGetResponse builds the gRPC response type from the result of the
// "Get" endpoint of the "CommentService" service.
func NewProtoGetResponse(result *commentserviceviews.CommentView) *comment_servicepb.GetResponse {
	message := &comment_servicepb.GetResponse{
		Id:        *result.ID,
		TaskId:    *result.TaskID,
		AuthorId:  *result.AuthorID,
		Body:      *result.Body,
		CreatedAt: *result.CreatedAt,
	}
	return message
}

// NewCreatePayload builds the payload of the "Create" endpoint of the
// "CommentService" service from the gRPC request type.
func NewCreatePayload(message *comment_servicepb.CreateRequest) *commentservice.CreatePayload {
	v := &commentservice.CreatePayload{
		TaskID:   message.TaskId,
		AuthorID: message.AuthorId,
		Body:     message.Body,
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "Create" endpoint of the "CommentService" service.
func NewProtoCreateResponse(result *commentserviceviews.CommentView) *comment_servicepb.CreateResponse {
	message := &comment_servicepb.CreateResponse{
		Id:        *result.ID,
		TaskId:    *result.TaskID,
		AuthorId:  *result.AuthorID,
		Body:      *result.Body,
		CreatedAt: *result.CreatedAt,
	}
	return message
}

// NewUpdatePayload builds the payload of the "Update" endpoint of the
// "CommentService" service from the gRPC request type.
func NewUpdatePayload(message *comment_servicepb.UpdateRequest) *commentservice.UpdatePayload {
	v := &commentservice.UpdatePayload{
		ID:   message.Id,
		Body: message.Body,
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "Update" endpoint of the "CommentService" service.
func NewProtoUpdateResponse(result *commentserviceviews.CommentView) *comment_servicepb.UpdateResponse {
	message := &comment_servicepb.UpdateResponse{
		Id:        *result.ID,
		TaskId:    *result.TaskID,
		AuthorId:  *result.AuthorID,
		Body:      *result.Body,
		CreatedAt: *result.CreatedAt,
	}
	return message
}

// NewDeletePayload builds the payload of the "Delete" endpoint of the
// "CommentService" service from the gRPC request type.
func NewDeletePayload(message *comment_servicepb.DeleteRequest) *commentservice.DeletePayload {
	v := &commentservice.DeletePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "Delete" endpoint of the "CommentService" service.
func NewProtoDeleteResponse() *comment_servicepb.DeleteResponse {
	message := &comment_servicepb.DeleteResponse{}
	return message
}
