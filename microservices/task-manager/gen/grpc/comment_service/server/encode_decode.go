// Code generated by goa v3.21.1, DO NOT EDIT.
//
// CommentService gRPC server encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package server

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
	commentservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service"
	commentserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service/views"
	comment_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/comment_service/pb"
)

// EncodeListResponse encodes responses from the "CommentService" service
// "List" endpoint.
func EncodeListResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(commentserviceviews.CommentCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CommentService", "List", "commentserviceviews.CommentCollection", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoCommentCollection(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "CommentService" service "List"
// endpoint.
func DecodeListRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *comment_servicepb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*comment_servicepb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("CommentService", "List", "*comment_servicepb.ListRequest", v)
		}
	}
	var payload *commentservice.ListPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "CommentService" service "Get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*commentserviceviews.Comment)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CommentService", "Get", "*commentserviceviews.Comment", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "CommentService" service "Get"
// endpoint.
func DecodeGetRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *comment_servicepb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*comment_servicepb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("CommentService", "Get", "*comment_servicepb.GetRequest", v)
		}
	}
	var payload *commentservice.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeCreateResponse encodes responses from the "CommentService" service
// "Create" endpoint.
func EncodeCreateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*commentserviceviews.Comment)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CommentService", "Create", "*commentserviceviews.Comment", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "CommentService" service
// "Create" endpoint.
func DecodeCreateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *comment_servicepb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*comment_servicepb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("CommentService", "Create", "*comment_servicepb.CreateRequest", v)
		}
	}
	var payload *commentservice.CreatePayload
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "CommentService" service
// "Update" endpoint.
func EncodeUpdateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*commentserviceviews.Comment)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CommentService", "Update", "*commentserviceviews.Comment", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "CommentService" service
// "Update" endpoint.
func DecodeUpdateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *comment_servicepb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*comment_servicepb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("CommentService", "Update", "*comment_servicepb.UpdateRequest", v)
		}
	}
	var payload *commentservice.UpdatePayload
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "CommentService" service
// "Delete" endpoint.
func EncodeDeleteResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "CommentService" service
// "Delete" endpoint.
func DecodeDeleteRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *comment_servicepb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*comment_servicepb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("CommentService", "Delete", "*comment_servicepb.DeleteRequest", v)
		}
	}
	var payload *commentservice.DeletePayload
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}
