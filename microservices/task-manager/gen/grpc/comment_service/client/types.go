// Code generated by goa v3.21.1, DO NOT EDIT.
//
// CommentService gRPC client types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	commentservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service"
	commentserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service/views"
	comment_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/comment_service/pb"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "List" endpoint of the "CommentService" service.
func NewProtoListRequest(payload *commentservice.ListPayload) *comment_servicepb.ListRequest {
	message := &comment_servicepb.ListRequest{
		TaskId: payload.TaskID,
	}
	return message
}

// NewListResult builds the result type of the "List" endpoint of the
// "CommentService" service from the gRPC response type.
func NewListResult(message *comment_servicepb.CommentCollection) commentserviceviews.CommentCollectionView {
	result := make([]*commentserviceviews.CommentView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &commentserviceviews.CommentView{
			ID:        &val.Id,
			TaskID:    &val.TaskId,
			AuthorID:  &val.AuthorId,
			Body:      &val.Body,
			CreatedAt: &val.CreatedAt,
		}
	}
	return result
}

// NewProtoGetRequest builds the gRPC request type from the payload of the
// "Get" endpoint of the "CommentService" service.
func NewProtoGetRequest(payload *commentservice.GetPayload) *comment_servicepb.GetRequest {
	message := &comment_servicepb.GetRequest{
		Id: payload.ID,
	}
	return message
}

// NewGetResult builds the result type of the "Get" endpoint of the
// "CommentService" service from the gRPC response type.
func NewGetResult(message *comment_servicepb.GetResponse) *commentserviceviews.CommentView {
	result := &commentserviceviews.CommentView{
		ID:        &message.Id,
		TaskID:    &message.TaskId,
		AuthorID:  &message.AuthorId,
		Body:      &message.Body,
		CreatedAt: &message.CreatedAt,
	}
	return result
}

// NewProtoCreateRequest builds the gRPC request type from the payload of the
// "Create" endpoint of the "CommentService" service.
func NewProtoCreateRequest(payload *commentservice.CreatePayload) *comment_servicepb.CreateRequest {
	message := &comment_servicepb.CreateRequest{
		TaskId:   payload.TaskID,
		AuthorId: payload.AuthorID,
		Body:     payload.Body,
	}
	return message
}

// NewCreateResult builds the result type of the "Create" endpoint of the
// "CommentService" service from the gRPC response type.
func NewCreateResult(message *comment_servicepb.CreateResponse) *commentserviceviews.CommentView {
	result := &commentserviceviews.CommentView{
		ID:        &message.Id,
		TaskID:    &message.TaskId,
		AuthorID:  &message.AuthorId,
		Body:      &message.Body,
		CreatedAt: &message.CreatedAt,
	}
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "Update" endpoint of the "CommentService" service.
func NewProtoUpdateRequest(payload *commentservice.UpdatePayload) *comment_servicepb.UpdateRequest {
	message := &comment_servicepb.UpdateRequest{
		Id:   payload.ID,
		Body: payload.Body,
	}
	return message
}

// NewUpdateResult builds the result type of the "Update" endpoint of the
// "CommentService" service from the gRPC response type.
func NewUpdateResult(message *comment_servicepb.UpdateResponse) *commentserviceviews.CommentView {
	result := &commentserviceviews.CommentView{
		ID:        &message.Id,
		TaskID:    &message.TaskId,
		AuthorID:  &message.AuthorId,
		Body:      &message.Body,
		CreatedAt: &message.CreatedAt,
	}
	return result
}

// NewProtoDeleteRequest builds the gRPC request type from the payload of the
// "Delete" endpoint of the "CommentService" service.
func NewProtoDeleteRequest(payload *commentservice.DeletePayload) *comment_servicepb.DeleteRequest {
	message := &comment_servicepb.DeleteRequest{
		Id: payload.ID,
	}
	return message
}
