// Code generated by goa v3.21.1, DO NOT EDIT.
//
// CommentService gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package client

import (
	"encoding/json"
	"fmt"

	commentservice "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service"
	comment_servicepb "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/comment_service/pb"
)

// BuildListPayload builds the payload for the CommentService List endpoint
// from CLI flags.
func BuildListPayload(commentServiceListMessage string) (*commentservice.ListPayload, error) {
	var err error
	var message comment_servicepb.ListRequest
	{
		if commentServiceListMessage != "" {
			err = json.Unmarshal([]byte(commentServiceListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"task_id\": \"Magnam corrupti.\"\n   }'")
			}
		}
	}
	v := &commentservice.ListPayload{
		TaskID: message.TaskId,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the CommentService Get endpoint from
// CLI flags.
func BuildGetPayload(commentServiceGetMessage string) (*commentservice.GetPayload, error) {
	var err error
	var message comment_servicepb.GetRequest
	{
		if commentServiceGetMessage != "" {
			err = json.Unmarshal([]byte(commentServiceGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Repellendus non.\"\n   }'")
			}
		}
	}
	v := &commentservice.GetPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildCreatePayload builds the payload for the CommentService Create endpoint
// from CLI flags.
func BuildCreatePayload(commentServiceCreateMessage string) (*commentservice.CreatePayload, error) {
	var err error
	var message comment_servicepb.CreateRequest
	{
		if commentServiceCreateMessage != "" {
			err = json.Unmarshal([]byte(commentServiceCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author_id\": \"Aut ratione ab non.\",\n      \"body\": \"Voluptatem aliquid.\",\n      \"task_id\": \"Qui dicta quo deserunt.\"\n   }'")
			}
		}
	}
	v := &commentservice.CreatePayload{
		TaskID:   message.TaskId,
		AuthorID: message.AuthorId,
		Body:     message.Body,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the CommentService Update endpoint
// from CLI flags.
func BuildUpdatePayload(commentServiceUpdateMessage string) (*commentservice.UpdatePayload, error) {
	var err error
	var message comment_servicepb.UpdateRequest
	{
		if commentServiceUpdateMessage != "" {
			err = json.Unmarshal([]byte(commentServiceUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"body\": \"Placeat tempora qui ratione nesciunt quam.\",\n      \"id\": \"Alias perferendis et excepturi rerum.\"\n   }'")
			}
		}
	}
	v := &commentservice.UpdatePayload{
		ID:   message.Id,
		Body: message.Body,
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the CommentService Delete endpoint
// from CLI flags.
func BuildDeletePayload(commentServiceDeleteMessage string) (*commentservice.DeletePayload, error) {
	var err error
	var message comment_servicepb.DeleteRequest
	{
		if commentServiceDeleteMessage != "" {
			err = json.Unmarshal([]byte(commentServiceDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Excepturi quo quas odit est consequuntur.\"\n   }'")
			}
		}
	}
	v := &commentservice.DeletePayload{
		ID: message.Id,
	}

	return v, nil
}
