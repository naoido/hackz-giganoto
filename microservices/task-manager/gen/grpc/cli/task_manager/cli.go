// Code generated by goa v3.21.1, DO NOT EDIT.
//
// task-manager gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package cli

import (
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
	commentservicec "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/comment_service/client"
	labelservicec "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/label_service/client"
	taskservicec "object-t.com/hackz-giganoto/microservices/task-manager/gen/grpc/task_service/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `task-service (list|get|create|update|delete)
comment-service (list|get|create|update|delete)
label-service (list|get|create|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` task-service list --message '{
      "assignee_id": "Beatae rerum sint.",
      "label_id": "Ut ut ut ipsa beatae veritatis qui.",
      "status": "Blanditiis error consectetur est placeat nihil quaerat."
   }'` + "\n" +
		os.Args[0] + ` comment-service list --message '{
      "task_id": "Magnam corrupti."
   }'` + "\n" +
		os.Args[0] + ` label-service list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		taskServiceFlags = flag.NewFlagSet("task-service", flag.ContinueOnError)

		taskServiceListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		taskServiceListMessageFlag = taskServiceListFlags.String("message", "", "")

		taskServiceGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		taskServiceGetMessageFlag = taskServiceGetFlags.String("message", "", "")

		taskServiceCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		taskServiceCreateMessageFlag = taskServiceCreateFlags.String("message", "", "")

		taskServiceUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		taskServiceUpdateMessageFlag = taskServiceUpdateFlags.String("message", "", "")

		taskServiceDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		taskServiceDeleteMessageFlag = taskServiceDeleteFlags.String("message", "", "")

		commentServiceFlags = flag.NewFlagSet("comment-service", flag.ContinueOnError)

		commentServiceListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		commentServiceListMessageFlag = commentServiceListFlags.String("message", "", "")

		commentServiceGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		commentServiceGetMessageFlag = commentServiceGetFlags.String("message", "", "")

		commentServiceCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		commentServiceCreateMessageFlag = commentServiceCreateFlags.String("message", "", "")

		commentServiceUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		commentServiceUpdateMessageFlag = commentServiceUpdateFlags.String("message", "", "")

		commentServiceDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		commentServiceDeleteMessageFlag = commentServiceDeleteFlags.String("message", "", "")

		labelServiceFlags = flag.NewFlagSet("label-service", flag.ContinueOnError)

		labelServiceListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		labelServiceGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		labelServiceGetMessageFlag = labelServiceGetFlags.String("message", "", "")

		labelServiceCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		labelServiceCreateMessageFlag = labelServiceCreateFlags.String("message", "", "")

		labelServiceUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		labelServiceUpdateMessageFlag = labelServiceUpdateFlags.String("message", "", "")

		labelServiceDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		labelServiceDeleteMessageFlag = labelServiceDeleteFlags.String("message", "", "")
	)
	taskServiceFlags.Usage = taskServiceUsage
	taskServiceListFlags.Usage = taskServiceListUsage
	taskServiceGetFlags.Usage = taskServiceGetUsage
	taskServiceCreateFlags.Usage = taskServiceCreateUsage
	taskServiceUpdateFlags.Usage = taskServiceUpdateUsage
	taskServiceDeleteFlags.Usage = taskServiceDeleteUsage

	commentServiceFlags.Usage = commentServiceUsage
	commentServiceListFlags.Usage = commentServiceListUsage
	commentServiceGetFlags.Usage = commentServiceGetUsage
	commentServiceCreateFlags.Usage = commentServiceCreateUsage
	commentServiceUpdateFlags.Usage = commentServiceUpdateUsage
	commentServiceDeleteFlags.Usage = commentServiceDeleteUsage

	labelServiceFlags.Usage = labelServiceUsage
	labelServiceListFlags.Usage = labelServiceListUsage
	labelServiceGetFlags.Usage = labelServiceGetUsage
	labelServiceCreateFlags.Usage = labelServiceCreateUsage
	labelServiceUpdateFlags.Usage = labelServiceUpdateUsage
	labelServiceDeleteFlags.Usage = labelServiceDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "task-service":
			svcf = taskServiceFlags
		case "comment-service":
			svcf = commentServiceFlags
		case "label-service":
			svcf = labelServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "task-service":
			switch epn {
			case "list":
				epf = taskServiceListFlags

			case "get":
				epf = taskServiceGetFlags

			case "create":
				epf = taskServiceCreateFlags

			case "update":
				epf = taskServiceUpdateFlags

			case "delete":
				epf = taskServiceDeleteFlags

			}

		case "comment-service":
			switch epn {
			case "list":
				epf = commentServiceListFlags

			case "get":
				epf = commentServiceGetFlags

			case "create":
				epf = commentServiceCreateFlags

			case "update":
				epf = commentServiceUpdateFlags

			case "delete":
				epf = commentServiceDeleteFlags

			}

		case "label-service":
			switch epn {
			case "list":
				epf = labelServiceListFlags

			case "get":
				epf = labelServiceGetFlags

			case "create":
				epf = labelServiceCreateFlags

			case "update":
				epf = labelServiceUpdateFlags

			case "delete":
				epf = labelServiceDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "task-service":
			c := taskservicec.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = taskservicec.BuildListPayload(*taskServiceListMessageFlag)
			case "get":
				endpoint = c.Get()
				data, err = taskservicec.BuildGetPayload(*taskServiceGetMessageFlag)
			case "create":
				endpoint = c.Create()
				data, err = taskservicec.BuildCreatePayload(*taskServiceCreateMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = taskservicec.BuildUpdatePayload(*taskServiceUpdateMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = taskservicec.BuildDeletePayload(*taskServiceDeleteMessageFlag)
			}
		case "comment-service":
			c := commentservicec.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = commentservicec.BuildListPayload(*commentServiceListMessageFlag)
			case "get":
				endpoint = c.Get()
				data, err = commentservicec.BuildGetPayload(*commentServiceGetMessageFlag)
			case "create":
				endpoint = c.Create()
				data, err = commentservicec.BuildCreatePayload(*commentServiceCreateMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = commentservicec.BuildUpdatePayload(*commentServiceUpdateMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = commentservicec.BuildDeletePayload(*commentServiceDeleteMessageFlag)
			}
		case "label-service":
			c := labelservicec.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
			case "get":
				endpoint = c.Get()
				data, err = labelservicec.BuildGetPayload(*labelServiceGetMessageFlag)
			case "create":
				endpoint = c.Create()
				data, err = labelservicec.BuildCreatePayload(*labelServiceCreateMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = labelservicec.BuildUpdatePayload(*labelServiceUpdateMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = labelservicec.BuildDeletePayload(*labelServiceDeleteMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// taskServiceUsage displays the usage of the task-service command and its
// subcommands.
func taskServiceUsage() {
	fmt.Fprintf(os.Stderr, `タスクを管理するサービス
Usage:
    %[1]s [globalflags] task-service COMMAND [flags]

COMMAND:
    list: タスクの一覧を取得します。フィルタリングも可能です。
    get: 指定されたIDのタスクを取得します。
    create: 新しいタスクを作成します。
    update: 既存のタスクを更新します。
    delete: タスクを削除します。

Additional help:
    %[1]s task-service COMMAND --help
`, os.Args[0])
}
func taskServiceListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-service list -message JSON

タスクの一覧を取得します。フィルタリングも可能です。
    -message JSON: 

Example:
    %[1]s task-service list --message '{
      "assignee_id": "Beatae rerum sint.",
      "label_id": "Ut ut ut ipsa beatae veritatis qui.",
      "status": "Blanditiis error consectetur est placeat nihil quaerat."
   }'
`, os.Args[0])
}

func taskServiceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-service get -message JSON

指定されたIDのタスクを取得します。
    -message JSON: 

Example:
    %[1]s task-service get --message '{
      "id": "Eum voluptatem."
   }'
`, os.Args[0])
}

func taskServiceCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-service create -message JSON

新しいタスクを作成します。
    -message JSON: 

Example:
    %[1]s task-service create --message '{
      "assignee_ids": [
         "Ratione velit tenetur et.",
         "Tempore unde quidem et animi.",
         "Recusandae delectus commodi dolorem molestiae."
      ],
      "description": "Ipsum ratione ullam dignissimos non quis.",
      "label_ids": [
         "Doloremque sit deleniti.",
         "Et rerum."
      ],
      "title": "Itaque ea mollitia aut cum."
   }'
`, os.Args[0])
}

func taskServiceUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-service update -message JSON

既存のタスクを更新します。
    -message JSON: 

Example:
    %[1]s task-service update --message '{
      "assignee_ids": [
         "Placeat ut.",
         "Odit occaecati id nemo saepe dolorum."
      ],
      "description": "Iste qui consequatur nulla.",
      "id": "Doloremque repellat.",
      "label_ids": [
         "Rem quam libero veniam delectus molestias sed.",
         "Sunt qui quo corporis vero maxime quis.",
         "Earum reiciendis aut illo voluptates.",
         "Sed aspernatur."
      ],
      "status": "Et ea consectetur nam qui pariatur magnam.",
      "title": "Eaque delectus delectus asperiores sint."
   }'
`, os.Args[0])
}

func taskServiceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-service delete -message JSON

タスクを削除します。
    -message JSON: 

Example:
    %[1]s task-service delete --message '{
      "id": "Id nostrum numquam dolor."
   }'
`, os.Args[0])
}

// commentServiceUsage displays the usage of the comment-service command and
// its subcommands.
func commentServiceUsage() {
	fmt.Fprintf(os.Stderr, `コメントを管理するサービス
Usage:
    %[1]s [globalflags] comment-service COMMAND [flags]

COMMAND:
    list: 指定されたタスクのコメント一覧を取得します。
    get: 指定されたIDのコメントを取得します。
    create: 新しいコメントを作成します。
    update: 既存のコメントを更新します。
    delete: コメントを削除します。

Additional help:
    %[1]s comment-service COMMAND --help
`, os.Args[0])
}
func commentServiceListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] comment-service list -message JSON

指定されたタスクのコメント一覧を取得します。
    -message JSON: 

Example:
    %[1]s comment-service list --message '{
      "task_id": "Magnam corrupti."
   }'
`, os.Args[0])
}

func commentServiceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] comment-service get -message JSON

指定されたIDのコメントを取得します。
    -message JSON: 

Example:
    %[1]s comment-service get --message '{
      "id": "Repellendus non."
   }'
`, os.Args[0])
}

func commentServiceCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] comment-service create -message JSON

新しいコメントを作成します。
    -message JSON: 

Example:
    %[1]s comment-service create --message '{
      "author_id": "Aut ratione ab non.",
      "body": "Voluptatem aliquid.",
      "task_id": "Qui dicta quo deserunt."
   }'
`, os.Args[0])
}

func commentServiceUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] comment-service update -message JSON

既存のコメントを更新します。
    -message JSON: 

Example:
    %[1]s comment-service update --message '{
      "body": "Placeat tempora qui ratione nesciunt quam.",
      "id": "Alias perferendis et excepturi rerum."
   }'
`, os.Args[0])
}

func commentServiceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] comment-service delete -message JSON

コメントを削除します。
    -message JSON: 

Example:
    %[1]s comment-service delete --message '{
      "id": "Excepturi quo quas odit est consequuntur."
   }'
`, os.Args[0])
}

// labelServiceUsage displays the usage of the label-service command and its
// subcommands.
func labelServiceUsage() {
	fmt.Fprintf(os.Stderr, `ラベルを管理するサービス
Usage:
    %[1]s [globalflags] label-service COMMAND [flags]

COMMAND:
    list: ラベルの一覧を取得します。
    get: 指定されたIDのラベルを取得します。
    create: 新しいラベルを作成します。
    update: 既存のラベルを更新します。
    delete: ラベルを削除します。

Additional help:
    %[1]s label-service COMMAND --help
`, os.Args[0])
}
func labelServiceListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] label-service list

ラベルの一覧を取得します。

Example:
    %[1]s label-service list
`, os.Args[0])
}

func labelServiceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] label-service get -message JSON

指定されたIDのラベルを取得します。
    -message JSON: 

Example:
    %[1]s label-service get --message '{
      "id": "Et ut."
   }'
`, os.Args[0])
}

func labelServiceCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] label-service create -message JSON

新しいラベルを作成します。
    -message JSON: 

Example:
    %[1]s label-service create --message '{
      "color": "Commodi inventore.",
      "name": "Soluta occaecati ut voluptas doloribus."
   }'
`, os.Args[0])
}

func labelServiceUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] label-service update -message JSON

既存のラベルを更新します。
    -message JSON: 

Example:
    %[1]s label-service update --message '{
      "color": "Placeat recusandae.",
      "id": "Magnam quia aut dolorem.",
      "name": "Alias ab perferendis asperiores autem repudiandae distinctio."
   }'
`, os.Args[0])
}

func labelServiceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] label-service delete -message JSON

ラベルを削除します。
    -message JSON: 

Example:
    %[1]s label-service delete --message '{
      "id": "Et perferendis exercitationem et."
   }'
`, os.Args[0])
}
