// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package taskservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	taskserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/task_service/views"
)

// タスクを管理するサービス
type Service interface {
	// タスクの一覧を取得します。フィルタリングも可能です。
	List(context.Context, *ListPayload) (res TaskCollection, err error)
	// 指定されたIDのタスクを取得します。
	Get(context.Context, *GetPayload) (res *Task, err error)
	// 新しいタスクを作成します。
	Create(context.Context, *CreatePayload) (res *Task, err error)
	// 既存のタスクを更新します。
	Update(context.Context, *UpdatePayload) (res *Task, err error)
	// タスクを削除します。
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "task-manager"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "TaskService"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"List", "Get", "Create", "Update", "Delete"}

// CreatePayload is the payload type of the TaskService service Create method.
type CreatePayload struct {
	// タイトル
	Title string
	// 説明
	Description *string
	// 担当者のユーザーIDリスト
	AssigneeIds []string
	// ラベルのIDリスト
	LabelIds []string
}

// DeletePayload is the payload type of the TaskService service Delete method.
type DeletePayload struct {
	// タスクID
	ID string
}

// GetPayload is the payload type of the TaskService service Get method.
type GetPayload struct {
	// タスクID
	ID string
}

// ListPayload is the payload type of the TaskService service List method.
type ListPayload struct {
	// ステータスでフィルタリング
	Status *string
	// 担当者IDでフィルタリング
	AssigneeID *string
	// ラベルIDでフィルタリング
	LabelID *string
}

// Task is the result type of the TaskService service Get method.
type Task struct {
	// タスクのユニークID
	ID string
	// タイトル
	Title string
	// 説明
	Description *string
	// ステータス (OPEN, IN_PROGRESS, DONE)
	Status string
	// 担当者のユーザーIDリスト
	AssigneeIds []string
	// ラベルのIDリスト
	LabelIds []string
	// 作成日時 (RFC3339)
	CreatedAt string
	// 更新日時 (RFC3339)
	UpdatedAt string
}

// TaskCollection is the result type of the TaskService service List method.
type TaskCollection []*Task

// UpdatePayload is the payload type of the TaskService service Update method.
type UpdatePayload struct {
	// タスクID
	ID string
	// タイトル
	Title *string
	// 説明
	Description *string
	// ステータス
	Status *string
	// 担当者のユーザーIDリスト
	AssigneeIds []string
	// ラベルのIDリスト
	LabelIds []string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewTaskCollection initializes result type TaskCollection from viewed result
// type TaskCollection.
func NewTaskCollection(vres taskserviceviews.TaskCollection) TaskCollection {
	return newTaskCollection(vres.Projected)
}

// NewViewedTaskCollection initializes viewed result type TaskCollection from
// result type TaskCollection using the given view.
func NewViewedTaskCollection(res TaskCollection, view string) taskserviceviews.TaskCollection {
	p := newTaskCollectionView(res)
	return taskserviceviews.TaskCollection{Projected: p, View: "default"}
}

// NewTask initializes result type Task from viewed result type Task.
func NewTask(vres *taskserviceviews.Task) *Task {
	return newTask(vres.Projected)
}

// NewViewedTask initializes viewed result type Task from result type Task
// using the given view.
func NewViewedTask(res *Task, view string) *taskserviceviews.Task {
	p := newTaskView(res)
	return &taskserviceviews.Task{Projected: p, View: "default"}
}

// newTaskCollection converts projected type TaskCollection to service type
// TaskCollection.
func newTaskCollection(vres taskserviceviews.TaskCollectionView) TaskCollection {
	res := make(TaskCollection, len(vres))
	for i, n := range vres {
		res[i] = newTask(n)
	}
	return res
}

// newTaskCollectionView projects result type TaskCollection to projected type
// TaskCollectionView using the "default" view.
func newTaskCollectionView(res TaskCollection) taskserviceviews.TaskCollectionView {
	vres := make(taskserviceviews.TaskCollectionView, len(res))
	for i, n := range res {
		vres[i] = newTaskView(n)
	}
	return vres
}

// newTask converts projected type Task to service type Task.
func newTask(vres *taskserviceviews.TaskView) *Task {
	res := &Task{
		Description: vres.Description,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	if vres.AssigneeIds != nil {
		res.AssigneeIds = make([]string, len(vres.AssigneeIds))
		for i, val := range vres.AssigneeIds {
			res.AssigneeIds[i] = val
		}
	}
	if vres.LabelIds != nil {
		res.LabelIds = make([]string, len(vres.LabelIds))
		for i, val := range vres.LabelIds {
			res.LabelIds[i] = val
		}
	}
	return res
}

// newTaskView projects result type Task to projected type TaskView using the
// "default" view.
func newTaskView(res *Task) *taskserviceviews.TaskView {
	vres := &taskserviceviews.TaskView{
		ID:          &res.ID,
		Title:       &res.Title,
		Description: res.Description,
		Status:      &res.Status,
		CreatedAt:   &res.CreatedAt,
		UpdatedAt:   &res.UpdatedAt,
	}
	if res.AssigneeIds != nil {
		vres.AssigneeIds = make([]string, len(res.AssigneeIds))
		for i, val := range res.AssigneeIds {
			vres.AssigneeIds[i] = val
		}
	}
	if res.LabelIds != nil {
		vres.LabelIds = make([]string, len(res.LabelIds))
		for i, val := range res.LabelIds {
			vres.LabelIds[i] = val
		}
	}
	return vres
}
