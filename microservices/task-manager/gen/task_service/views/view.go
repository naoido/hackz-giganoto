// Code generated by goa v3.21.1, DO NOT EDIT.
//
// TaskService views
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// TaskCollection is the viewed result type that is projected based on a view.
type TaskCollection struct {
	// Type to project
	Projected TaskCollectionView
	// View to render
	View string
}

// Task is the viewed result type that is projected based on a view.
type Task struct {
	// Type to project
	Projected *TaskView
	// View to render
	View string
}

// TaskCollectionView is a type that runs validations on a projected type.
type TaskCollectionView []*TaskView

// TaskView is a type that runs validations on a projected type.
type TaskView struct {
	// タスクのユニークID
	ID *string
	// タイトル
	Title *string
	// 説明
	Description *string
	// ステータス (OPEN, IN_PROGRESS, DONE)
	Status *string
	// 担当者のユーザーIDリスト
	AssigneeIds []string
	// ラベルのIDリスト
	LabelIds []string
	// 作成日時 (RFC3339)
	CreatedAt *string
	// 更新日時 (RFC3339)
	UpdatedAt *string
}

var (
	// TaskCollectionMap is a map indexing the attribute names of TaskCollection by
	// view name.
	TaskCollectionMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"status",
			"assignee_ids",
			"label_ids",
			"created_at",
			"updated_at",
		},
	}
	// TaskMap is a map indexing the attribute names of Task by view name.
	TaskMap = map[string][]string{
		"default": {
			"id",
			"title",
			"description",
			"status",
			"assignee_ids",
			"label_ids",
			"created_at",
			"updated_at",
		},
	}
)

// ValidateTaskCollection runs the validations defined on the viewed result
// type TaskCollection.
func ValidateTaskCollection(result TaskCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTaskCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTask runs the validations defined on the viewed result type Task.
func ValidateTask(result *Task) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTaskView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTaskCollectionView runs the validations defined on
// TaskCollectionView using the "default" view.
func ValidateTaskCollectionView(result TaskCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTaskView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTaskView runs the validations defined on TaskView using the
// "default" view.
func ValidateTaskView(result *TaskView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	return
}
