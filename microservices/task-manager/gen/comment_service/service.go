// Code generated by goa v3.21.1, DO NOT EDIT.
//
// CommentService service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package commentservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	commentserviceviews "object-t.com/hackz-giganoto/microservices/task-manager/gen/comment_service/views"
)

// コメントを管理するサービス
type Service interface {
	// 指定されたタスクのコメント一覧を取得します。
	List(context.Context, *ListPayload) (res CommentCollection, err error)
	// 指定されたIDのコメントを取得します。
	Get(context.Context, *GetPayload) (res *Comment, err error)
	// 新しいコメントを作成します。
	Create(context.Context, *CreatePayload) (res *Comment, err error)
	// 既存のコメントを更新します。
	Update(context.Context, *UpdatePayload) (res *Comment, err error)
	// コメントを削除します。
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "task-manager"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "CommentService"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"List", "Get", "Create", "Update", "Delete"}

// Comment is the result type of the CommentService service Get method.
type Comment struct {
	// コメントのユニークID
	ID string
	// 紐づくタスクのID
	TaskID string
	// 投稿者のユーザーID
	AuthorID string
	// コメント本文
	Body string
	// 作成日時 (RFC3339)
	CreatedAt string
}

// CommentCollection is the result type of the CommentService service List
// method.
type CommentCollection []*Comment

// CreatePayload is the payload type of the CommentService service Create
// method.
type CreatePayload struct {
	// 紐づくタスクのID
	TaskID string
	// 投稿者のユーザーID
	AuthorID string
	// コメント本文
	Body string
}

// DeletePayload is the payload type of the CommentService service Delete
// method.
type DeletePayload struct {
	// コメントID
	ID string
}

// GetPayload is the payload type of the CommentService service Get method.
type GetPayload struct {
	// コメントID
	ID string
}

// ListPayload is the payload type of the CommentService service List method.
type ListPayload struct {
	// タスクID
	TaskID string
}

// UpdatePayload is the payload type of the CommentService service Update
// method.
type UpdatePayload struct {
	// コメントID
	ID string
	// コメント本文
	Body string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewCommentCollection initializes result type CommentCollection from viewed
// result type CommentCollection.
func NewCommentCollection(vres commentserviceviews.CommentCollection) CommentCollection {
	return newCommentCollection(vres.Projected)
}

// NewViewedCommentCollection initializes viewed result type CommentCollection
// from result type CommentCollection using the given view.
func NewViewedCommentCollection(res CommentCollection, view string) commentserviceviews.CommentCollection {
	p := newCommentCollectionView(res)
	return commentserviceviews.CommentCollection{Projected: p, View: "default"}
}

// NewComment initializes result type Comment from viewed result type Comment.
func NewComment(vres *commentserviceviews.Comment) *Comment {
	return newComment(vres.Projected)
}

// NewViewedComment initializes viewed result type Comment from result type
// Comment using the given view.
func NewViewedComment(res *Comment, view string) *commentserviceviews.Comment {
	p := newCommentView(res)
	return &commentserviceviews.Comment{Projected: p, View: "default"}
}

// newCommentCollection converts projected type CommentCollection to service
// type CommentCollection.
func newCommentCollection(vres commentserviceviews.CommentCollectionView) CommentCollection {
	res := make(CommentCollection, len(vres))
	for i, n := range vres {
		res[i] = newComment(n)
	}
	return res
}

// newCommentCollectionView projects result type CommentCollection to projected
// type CommentCollectionView using the "default" view.
func newCommentCollectionView(res CommentCollection) commentserviceviews.CommentCollectionView {
	vres := make(commentserviceviews.CommentCollectionView, len(res))
	for i, n := range res {
		vres[i] = newCommentView(n)
	}
	return vres
}

// newComment converts projected type Comment to service type Comment.
func newComment(vres *commentserviceviews.CommentView) *Comment {
	res := &Comment{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.TaskID != nil {
		res.TaskID = *vres.TaskID
	}
	if vres.AuthorID != nil {
		res.AuthorID = *vres.AuthorID
	}
	if vres.Body != nil {
		res.Body = *vres.Body
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	return res
}

// newCommentView projects result type Comment to projected type CommentView
// using the "default" view.
func newCommentView(res *Comment) *commentserviceviews.CommentView {
	vres := &commentserviceviews.CommentView{
		ID:        &res.ID,
		TaskID:    &res.TaskID,
		AuthorID:  &res.AuthorID,
		Body:      &res.Body,
		CreatedAt: &res.CreatedAt,
	}
	return vres
}
