// Code generated by goa v3.21.1, DO NOT EDIT.
//
// CommentService views
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/task-manager/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// CommentCollection is the viewed result type that is projected based on a
// view.
type CommentCollection struct {
	// Type to project
	Projected CommentCollectionView
	// View to render
	View string
}

// Comment is the viewed result type that is projected based on a view.
type Comment struct {
	// Type to project
	Projected *CommentView
	// View to render
	View string
}

// CommentCollectionView is a type that runs validations on a projected type.
type CommentCollectionView []*CommentView

// CommentView is a type that runs validations on a projected type.
type CommentView struct {
	// コメントのユニークID
	ID *string
	// 紐づくタスクのID
	TaskID *string
	// 投稿者のユーザーID
	AuthorID *string
	// コメント本文
	Body *string
	// 作成日時 (RFC3339)
	CreatedAt *string
}

var (
	// CommentCollectionMap is a map indexing the attribute names of
	// CommentCollection by view name.
	CommentCollectionMap = map[string][]string{
		"default": {
			"id",
			"task_id",
			"author_id",
			"body",
			"created_at",
		},
	}
	// CommentMap is a map indexing the attribute names of Comment by view name.
	CommentMap = map[string][]string{
		"default": {
			"id",
			"task_id",
			"author_id",
			"body",
			"created_at",
		},
	}
)

// ValidateCommentCollection runs the validations defined on the viewed result
// type CommentCollection.
func ValidateCommentCollection(result CommentCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCommentCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateComment runs the validations defined on the viewed result type
// Comment.
func ValidateComment(result *Comment) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCommentView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateCommentCollectionView runs the validations defined on
// CommentCollectionView using the "default" view.
func ValidateCommentCollectionView(result CommentCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCommentView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCommentView runs the validations defined on CommentView using the
// "default" view.
func ValidateCommentView(result *CommentView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "result"))
	}
	if result.AuthorID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author_id", "result"))
	}
	if result.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	return
}
