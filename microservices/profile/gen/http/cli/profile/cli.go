// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile HTTP client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	profilec "object-t.com/hackz-giganoto/microservices/profile/gen/http/profile/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `profile (create|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` profile create --body '{
      "username": "Veniam eveniet inventore placeat quibusdam rerum."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		profileFlags = flag.NewFlagSet("profile", flag.ContinueOnError)

		profileCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		profileCreateBodyFlag = profileCreateFlags.String("body", "REQUIRED", "")

		profileGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		profileGetIDFlag = profileGetFlags.String("id", "REQUIRED", "Profile ID")
	)
	profileFlags.Usage = profileUsage
	profileCreateFlags.Usage = profileCreateUsage
	profileGetFlags.Usage = profileGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "profile":
			svcf = profileFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "profile":
			switch epn {
			case "create":
				epf = profileCreateFlags

			case "get":
				epf = profileGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "profile":
			c := profilec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = profilec.BuildCreatePayload(*profileCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = profilec.BuildGetPayload(*profileGetIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// profileUsage displays the usage of the profile command and its subcommands.
func profileUsage() {
	fmt.Fprintf(os.Stderr, `The profile service allows management of user profiles.
Usage:
    %[1]s [globalflags] profile COMMAND [flags]

COMMAND:
    create: Create implements create.
    get: Get implements get.

Additional help:
    %[1]s profile COMMAND --help
`, os.Args[0])
}
func profileCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s profile create --body '{
      "username": "Veniam eveniet inventore placeat quibusdam rerum."
   }'
`, os.Args[0])
}

func profileGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile get -id STRING

Get implements get.
    -id STRING: Profile ID

Example:
    %[1]s profile get --id "Quis qui praesentium quo qui debitis."
`, os.Args[0])
}
