// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile HTTP server types
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package server

import (
	goa "goa.design/goa/v3/pkg"
	profile "object-t.com/hackz-giganoto/microservices/profile/gen/profile"
	profileviews "object-t.com/hackz-giganoto/microservices/profile/gen/profile/views"
)

// CreateRequestBody is the type of the "profile" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// The user's name
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// CreateResponseBody is the type of the "profile" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique profile ID
	ID string `form:"id" json:"id" xml:"id"`
	// The user's name
	Username string `form:"username" json:"username" xml:"username"`
}

// GetResponseBody is the type of the "profile" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// Unique profile ID
	ID string `form:"id" json:"id" xml:"id"`
	// The user's name
	Username string `form:"username" json:"username" xml:"username"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "profile" service.
func NewCreateResponseBody(res *profileviews.GoaExampleProfileView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:       *res.ID,
		Username: *res.Username,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "profile" service.
func NewGetResponseBody(res *profileviews.GoaExampleProfileView) *GetResponseBody {
	body := &GetResponseBody{
		ID:       *res.ID,
		Username: *res.Username,
	}
	return body
}

// NewCreateProfilePayload builds a profile service create endpoint payload.
func NewCreateProfilePayload(body *CreateRequestBody) *profile.ProfilePayload {
	v := &profile.ProfilePayload{
		Username: *body.Username,
	}

	return v
}

// NewGetPayload builds a profile service get endpoint payload.
func NewGetPayload(id string) *profile.GetPayload {
	v := &profile.GetPayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	return
}
