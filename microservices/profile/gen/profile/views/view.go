// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile views
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// GoaExampleProfile is the viewed result type that is projected based on a
// view.
type GoaExampleProfile struct {
	// Type to project
	Projected *GoaExampleProfileView
	// View to render
	View string
}

// GoaExampleProfileView is a type that runs validations on a projected type.
type GoaExampleProfileView struct {
	// Unique profile ID
	ID *string
	// The user's name
	Username *string
}

var (
	// GoaExampleProfileMap is a map indexing the attribute names of
	// GoaExampleProfile by view name.
	GoaExampleProfileMap = map[string][]string{
		"default": {
			"id",
			"username",
		},
	}
)

// ValidateGoaExampleProfile runs the validations defined on the viewed result
// type GoaExampleProfile.
func ValidateGoaExampleProfile(result *GoaExampleProfile) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateGoaExampleProfileView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateGoaExampleProfileView runs the validations defined on
// GoaExampleProfileView using the "default" view.
func ValidateGoaExampleProfileView(result *GoaExampleProfileView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "result"))
	}
	return
}
