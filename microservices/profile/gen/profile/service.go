// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile service
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package profile

import (
	"context"

	profileviews "object-t.com/hackz-giganoto/microservices/profile/gen/profile/views"
)

// The profile service allows management of user profiles.
type Service interface {
	// Create implements create.
	Create(context.Context, *ProfilePayload) (res *GoaExampleProfile, err error)
	// Get implements get.
	Get(context.Context, *GetPayload) (res *GoaExampleProfile, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "profile"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "profile"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"create", "get"}

// GetPayload is the payload type of the profile service get method.
type GetPayload struct {
	// Profile ID
	ID string
}

// GoaExampleProfile is the result type of the profile service create method.
type GoaExampleProfile struct {
	// Unique profile ID
	ID string
	// The user's name
	Username string
}

// ProfilePayload is the payload type of the profile service create method.
type ProfilePayload struct {
	// The user's name
	Username string
}

// NewGoaExampleProfile initializes result type GoaExampleProfile from viewed
// result type GoaExampleProfile.
func NewGoaExampleProfile(vres *profileviews.GoaExampleProfile) *GoaExampleProfile {
	return newGoaExampleProfile(vres.Projected)
}

// NewViewedGoaExampleProfile initializes viewed result type GoaExampleProfile
// from result type GoaExampleProfile using the given view.
func NewViewedGoaExampleProfile(res *GoaExampleProfile, view string) *profileviews.GoaExampleProfile {
	p := newGoaExampleProfileView(res)
	return &profileviews.GoaExampleProfile{Projected: p, View: "default"}
}

// newGoaExampleProfile converts projected type GoaExampleProfile to service
// type GoaExampleProfile.
func newGoaExampleProfile(vres *profileviews.GoaExampleProfileView) *GoaExampleProfile {
	res := &GoaExampleProfile{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Username != nil {
		res.Username = *vres.Username
	}
	return res
}

// newGoaExampleProfileView projects result type GoaExampleProfile to projected
// type GoaExampleProfileView using the "default" view.
func newGoaExampleProfileView(res *GoaExampleProfile) *profileviews.GoaExampleProfileView {
	vres := &profileviews.GoaExampleProfileView{
		ID:       &res.ID,
		Username: &res.Username,
	}
	return vres
}
