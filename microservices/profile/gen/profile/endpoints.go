// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile endpoints
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package profile

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "profile" service endpoints.
type Endpoints struct {
	Create goa.Endpoint
	Get    goa.Endpoint
}

// NewEndpoints wraps the methods of the "profile" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Create: NewCreateEndpoint(s),
		Get:    NewGetEndpoint(s),
	}
}

// Use applies the given middleware to all the "profile" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Create = m(e.Create)
	e.Get = m(e.Get)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "profile".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ProfilePayload)
		res, err := s.Create(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoaExampleProfile(res, "default")
		return vres, nil
	}
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "profile".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPayload)
		res, err := s.Get(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedGoaExampleProfile(res, "default")
		return vres, nil
	}
}
