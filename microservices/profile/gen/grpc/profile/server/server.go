// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile gRPC server
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package server

import (
	"context"
	"errors"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
	profilepb "object-t.com/hackz-giganoto/microservices/profile/gen/grpc/profile/pb"
	profile "object-t.com/hackz-giganoto/microservices/profile/gen/profile"
)

// Server implements the profilepb.ProfileServer interface.
type Server struct {
	GetProfileH    goagrpc.UnaryHandler
	UpdateProfileH goagrpc.UnaryHandler
	profilepb.UnimplementedProfileServer
}

// New instantiates the server struct with the profile service endpoints.
func New(e *profile.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetProfileH:    NewGetProfileHandler(e.GetProfile, uh),
		UpdateProfileH: NewUpdateProfileHandler(e.UpdateProfile, uh),
	}
}

// NewGetProfileHandler creates a gRPC handler which serves the "profile"
// service "get_profile" endpoint.
func NewGetProfileHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetProfileRequest, EncodeGetProfileResponse)
	}
	return h
}

// GetProfile implements the "GetProfile" method in profilepb.ProfileServer
// interface.
func (s *Server) GetProfile(ctx context.Context, message *profilepb.GetProfileRequest) (*profilepb.GetProfileResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "get_profile")
	ctx = context.WithValue(ctx, goa.ServiceKey, "profile")
	resp, err := s.GetProfileH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "internal_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*profilepb.GetProfileResponse), nil
}

// NewUpdateProfileHandler creates a gRPC handler which serves the "profile"
// service "update_profile" endpoint.
func NewUpdateProfileHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateProfileRequest, EncodeUpdateProfileResponse)
	}
	return h
}

// UpdateProfile implements the "UpdateProfile" method in
// profilepb.ProfileServer interface.
func (s *Server) UpdateProfile(ctx context.Context, message *profilepb.UpdateProfileRequest) (*profilepb.UpdateProfileResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "update_profile")
	ctx = context.WithValue(ctx, goa.ServiceKey, "profile")
	resp, err := s.UpdateProfileH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "bad_request":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "internal_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*profilepb.UpdateProfileResponse), nil
}
