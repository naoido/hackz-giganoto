// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile gRPC client encoders and decoders
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	profilepb "object-t.com/hackz-giganoto/microservices/profile/gen/grpc/profile/pb"
	profile "object-t.com/hackz-giganoto/microservices/profile/gen/profile"
)

// BuildGetProfileFunc builds the remote method to invoke for "profile" service
// "get_profile" endpoint.
func BuildGetProfileFunc(grpccli profilepb.ProfileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetProfile(ctx, reqpb.(*profilepb.GetProfileRequest), opts...)
		}
		return grpccli.GetProfile(ctx, &profilepb.GetProfileRequest{}, opts...)
	}
}

// EncodeGetProfileRequest encodes requests sent to profile get_profile
// endpoint.
func EncodeGetProfileRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*profile.GetProfilePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "get_profile", "*profile.GetProfilePayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoGetProfileRequest(payload), nil
}

// DecodeGetProfileResponse decodes responses from the profile get_profile
// endpoint.
func DecodeGetProfileResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*profilepb.GetProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "get_profile", "*profilepb.GetProfileResponse", v)
	}
	res := NewGetProfileResult(message)
	return res, nil
}

// BuildUpdateProfileFunc builds the remote method to invoke for "profile"
// service "update_profile" endpoint.
func BuildUpdateProfileFunc(grpccli profilepb.ProfileClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.UpdateProfile(ctx, reqpb.(*profilepb.UpdateProfileRequest), opts...)
		}
		return grpccli.UpdateProfile(ctx, &profilepb.UpdateProfileRequest{}, opts...)
	}
}

// EncodeUpdateProfileRequest encodes requests sent to profile update_profile
// endpoint.
func EncodeUpdateProfileRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*profile.UpdateProfilePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "update_profile", "*profile.UpdateProfilePayload", v)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewProtoUpdateProfileRequest(payload), nil
}

// DecodeUpdateProfileResponse decodes responses from the profile
// update_profile endpoint.
func DecodeUpdateProfileResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*profilepb.UpdateProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profile", "update_profile", "*profilepb.UpdateProfileResponse", v)
	}
	res := NewUpdateProfileResult(message)
	return res, nil
}
