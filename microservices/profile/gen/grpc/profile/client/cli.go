// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package client

import (
	"encoding/json"
	"fmt"

	profilepb "object-t.com/hackz-giganoto/microservices/profile/gen/grpc/profile/pb"
	profile "object-t.com/hackz-giganoto/microservices/profile/gen/profile"
)

// BuildCreateProfilePayload builds the payload for the profile create_profile
// endpoint from CLI flags.
func BuildCreateProfilePayload(profileCreateProfileMessage string, profileCreateProfileToken string) (*profile.CreateProfilePayload, error) {
	var err error
	var message profilepb.CreateProfileRequest
	{
		if profileCreateProfileMessage != "" {
			err = json.Unmarshal([]byte(profileCreateProfileMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Aut magnam laborum ad porro.\",\n      \"user_id\": \"Omnis enim omnis autem accusamus.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if profileCreateProfileToken != "" {
			token = &profileCreateProfileToken
		}
	}
	v := &profile.CreateProfilePayload{
		UserID: message.UserId,
		Name:   message.Name,
	}
	v.Token = token

	return v, nil
}

// BuildGetProfilePayload builds the payload for the profile get_profile
// endpoint from CLI flags.
func BuildGetProfilePayload(profileGetProfileToken string) (*profile.GetProfilePayload, error) {
	var token *string
	{
		if profileGetProfileToken != "" {
			token = &profileGetProfileToken
		}
	}
	v := &profile.GetProfilePayload{}
	v.Token = token

	return v, nil
}

// BuildUpdateProfilePayload builds the payload for the profile update_profile
// endpoint from CLI flags.
func BuildUpdateProfilePayload(profileUpdateProfileMessage string, profileUpdateProfileToken string) (*profile.UpdateProfilePayload, error) {
	var err error
	var message profilepb.UpdateProfileRequest
	{
		if profileUpdateProfileMessage != "" {
			err = json.Unmarshal([]byte(profileUpdateProfileMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Voluptas tenetur et.\"\n   }'")
			}
		}
	}
	var token *string
	{
		if profileUpdateProfileToken != "" {
			token = &profileUpdateProfileToken
		}
	}
	v := &profile.UpdateProfilePayload{
		Name: message.Name,
	}
	v.Token = token

	return v, nil
}
