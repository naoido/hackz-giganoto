// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profile gRPC client CLI support package
//
// Command:
// $ goa gen object-t.com/hackz-giganoto/microservices/profile/design

package cli

import (
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
	profilec "object-t.com/hackz-giganoto/microservices/profile/gen/grpc/profile/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `profile (create-profile|get-profile|update-profile)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` profile create-profile --message '{
      "name": "Aut magnam laborum ad porro.",
      "user_id": "Omnis enim omnis autem accusamus."
   }' --token "Officiis ad quas nihil."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		profileFlags = flag.NewFlagSet("profile", flag.ContinueOnError)

		profileCreateProfileFlags       = flag.NewFlagSet("create-profile", flag.ExitOnError)
		profileCreateProfileMessageFlag = profileCreateProfileFlags.String("message", "", "")
		profileCreateProfileTokenFlag   = profileCreateProfileFlags.String("token", "", "")

		profileGetProfileFlags     = flag.NewFlagSet("get-profile", flag.ExitOnError)
		profileGetProfileTokenFlag = profileGetProfileFlags.String("token", "", "")

		profileUpdateProfileFlags       = flag.NewFlagSet("update-profile", flag.ExitOnError)
		profileUpdateProfileMessageFlag = profileUpdateProfileFlags.String("message", "", "")
		profileUpdateProfileTokenFlag   = profileUpdateProfileFlags.String("token", "", "")
	)
	profileFlags.Usage = profileUsage
	profileCreateProfileFlags.Usage = profileCreateProfileUsage
	profileGetProfileFlags.Usage = profileGetProfileUsage
	profileUpdateProfileFlags.Usage = profileUpdateProfileUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "profile":
			svcf = profileFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "profile":
			switch epn {
			case "create-profile":
				epf = profileCreateProfileFlags

			case "get-profile":
				epf = profileGetProfileFlags

			case "update-profile":
				epf = profileUpdateProfileFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "profile":
			c := profilec.NewClient(cc, opts...)
			switch epn {
			case "create-profile":
				endpoint = c.CreateProfile()
				data, err = profilec.BuildCreateProfilePayload(*profileCreateProfileMessageFlag, *profileCreateProfileTokenFlag)
			case "get-profile":
				endpoint = c.GetProfile()
				data, err = profilec.BuildGetProfilePayload(*profileGetProfileTokenFlag)
			case "update-profile":
				endpoint = c.UpdateProfile()
				data, err = profilec.BuildUpdateProfilePayload(*profileUpdateProfileMessageFlag, *profileUpdateProfileTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// profileUsage displays the usage of the profile command and its subcommands.
func profileUsage() {
	fmt.Fprintf(os.Stderr, `User profile management service
Usage:
    %[1]s [globalflags] profile COMMAND [flags]

COMMAND:
    create-profile: Create a new user profile
    get-profile: Get user profile
    update-profile: Update user profile

Additional help:
    %[1]s profile COMMAND --help
`, os.Args[0])
}
func profileCreateProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile create-profile -message JSON -token STRING

Create a new user profile
    -message JSON: 
    -token STRING: 

Example:
    %[1]s profile create-profile --message '{
      "name": "Aut magnam laborum ad porro.",
      "user_id": "Omnis enim omnis autem accusamus."
   }' --token "Officiis ad quas nihil."
`, os.Args[0])
}

func profileGetProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile get-profile -token STRING

Get user profile
    -token STRING: 

Example:
    %[1]s profile get-profile --token "Esse dolor et minima exercitationem asperiores."
`, os.Args[0])
}

func profileUpdateProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profile update-profile -message JSON -token STRING

Update user profile
    -message JSON: 
    -token STRING: 

Example:
    %[1]s profile update-profile --message '{
      "name": "Voluptas tenetur et."
   }' --token "Asperiores quidem."
`, os.Args[0])
}
