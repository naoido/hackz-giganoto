# version: '3.9'

services:
  kong:
    image: kong:latest
    container_name: kong-gateway
    env_file:
      - ./gateway/.env.example
    environment:
      - KONG_UNTRUSTED_LUA_SANDBOX_REQUIRES=resty.http,cjson.safe
      - KONG_PLUGINS=bundled,token-transformer
    ports:
      - "9000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./gateway/kong.yaml:/etc/kong/kong.yaml:ro
      - ./gateway/plugins:/usr/local/custom_plugins/kong/plugins:ro
    depends_on:
      - auth
      # - bff
    networks:
      - external_network
      - internal_network

  auth:
    build:
      context: .
      dockerfile: build/Dockerfile
      args:
        SERVICE_NAME: auth
    image: goa-microservice/auth-service:latest
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - internal_network
      - external_network # あまり良くないけど、GitHubと通信する必要があるため
    depends_on:
      redis:
        condition: service_healthy

  # bff:
  #   build:
  #     context: .
  #     dockerfile: build/Dockerfile
  #     args:
  #       SERVICE_NAME: bff
  #   image: goa-microservice/bff-service:latest
  #   env_file:
  #     - .env
  #   restart: unless-stopped
  #   ports:
  #     - "50054:50054"
  #   environment:
  #     - CHAT_SERVICE_ADDR=chat:50053
  #     - PROFILE_SERVICE_ADDR=profile:50052
  #   networks:
  #     - internal_network

  redis:
    image: "redis:latest"
    networks:
      - internal_network
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 10s
      timeout: 5s
      retries: 3

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4315:4317"
      - "4316:4318"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "1777:1777"
    depends_on:
      - jaeger
    networks:
      - internal_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - internal_network
      - external_network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"  # Loki API
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./telemetry/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-sg:/loki
    networks:
      - internal_network
      - external_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    volumes:
      - grafana-sg:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - jaeger
      - loki
    networks:
      - internal_network
      - external_network

volumes:
  grafana-sg:
  loki-sg:

networks:
  internal_network:
    internal: true
  external_network: