name: Build and Push Docker Images

on:
  push:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/naoido/hackz-giganoto

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth, chat, bff]
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.4'

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate version tag
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [ -n "${{ github.event.inputs.tag }}" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="v$(date +'%Y%m%d')-${GITHUB_SHA::6}"
        fi
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version tag: ${VERSION}"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=raw,value=${{ steps.version.outputs.tag }}
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./build/Dockerfile
        build-args: |
          SERVICE_NAME=${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-gitops:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'release'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Generate version tag
      id: version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [ -n "${{ github.event.inputs.tag }}" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="v$(date +'%Y%m%d')-${GITHUB_SHA::6}"
        fi
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version tag: ${VERSION}"

    - name: Create update branch
      run: |
        BRANCH_NAME="chore/update-image-tags-${{ steps.version.outputs.tag }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b ${BRANCH_NAME}
        echo "branch=${BRANCH_NAME}" >> $GITHUB_ENV

    - name: Update image tags in kustomization
      run: |
        VERSION="${{ steps.version.outputs.tag }}"
        
        # Update base kustomization.yaml with new image tags
        sed -i "s|newTag: .*|newTag: ${VERSION}|g" k8s-manifests/base/kustomization.yaml
        
        # Show changes
        echo "Updated kustomization.yaml:"
        cat k8s-manifests/base/kustomization.yaml

    - name: Commit and push changes
      run: |
        VERSION="${{ steps.version.outputs.tag }}"
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add k8s-manifests/base/kustomization.yaml
        git commit -m "chore: update image tags to ${VERSION}

        Update microservice image tags:
        - auth service: ${VERSION}
        - chat service: ${VERSION}  
        - bff service: ${VERSION}
        
        This update enables ArgoCD to detect and deploy the latest changes."
        
        git push origin ${BRANCH_NAME}

    - name: Create Pull Request
      run: |
        VERSION="${{ steps.version.outputs.tag }}"
        
        gh pr create \
          --title "chore: update image tags to ${VERSION}" \
          --body "## Summary
        
        This PR updates the Kubernetes manifest image tags to enable ArgoCD to detect and deploy the latest microservice changes.
        
        ## Changes
        - Updated image tags in \`k8s-manifests/base/kustomization.yaml\`
        - Auth service: \`${VERSION}\`
        - Chat service: \`${VERSION}\`
        - BFF service: \`${VERSION}\`
        
        ## Context
        - Triggered by: \`${{ github.event_name }}\`
        - Commit SHA: \`${{ github.sha }}\`
        - Branch: \`${{ github.ref_name }}\`
        
        This PR was automatically created by GitHub Actions to update image versions after a successful build and push." \
          --head ${BRANCH_NAME} \
          --base main \
          --label "chore" \
          --label "gitops"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}